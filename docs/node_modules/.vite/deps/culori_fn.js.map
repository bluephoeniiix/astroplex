{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/rgb/parseNumber.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/colors/named.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/rgb/parseNamed.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/rgb/parseHex.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/util/regex.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/rgb/parseRgbLegacy.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/_prepare.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/converter.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/modes.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/parse.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/rgb/parseRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/rgb/parseTransparent.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/interpolate/lerp.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/interpolate/piecewise.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/interpolate/linear.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/fixup/alpha.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/rgb/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/a98/convertA98ToXyz65.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/a98/convertXyz65ToA98.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lrgb/convertRgbToLrgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyz65/convertRgbToXyz65.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lrgb/convertLrgbToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyz65/convertXyz65ToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/a98/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/util/normalizeHue.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/fixup/hue.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/cubehelix/constants.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/cubehelix/convertRgbToCubehelix.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/cubehelix/convertCubehelixToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/difference.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/average.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/cubehelix/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lch/convertLabToLch.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lch/convertLchToLab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyz65/constants.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/constants.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab65/convertLab65ToXyz65.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab65/convertLab65ToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab65/convertXyz65ToLab65.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab65/convertRgbToLab65.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/dlch/constants.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/dlch/convertDlchToLab65.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/dlch/convertLab65ToDlch.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/dlab/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/dlch/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsi/convertHsiToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsi/convertRgbToHsi.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsi/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsl/convertHslToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsl/convertRgbToHsl.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/util/hue.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsl/parseHslLegacy.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsl/parseHsl.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsl/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsv/convertHsvToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsv/convertRgbToHsv.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hsv/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hwb/convertHwbToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hwb/convertRgbToHwb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hwb/parseHwb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/hwb/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/jab/convertXyz65ToJab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/jab/convertJabToXyz65.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/jab/convertRgbToJab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/jab/convertJabToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/jab/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/jch/convertJabToJch.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/jch/convertJchToJab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/jch/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyz50/constants.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab/convertLabToXyz50.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyz50/convertXyz50ToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab/convertLabToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyz50/convertRgbToXyz50.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab/convertXyz50ToLab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab/convertRgbToLab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab/parseLab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lab65/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lch/parseLch.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lch/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lch65/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lchuv/convertLuvToLchuv.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lchuv/convertLchuvToLuv.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/luv/convertXyz50ToLuv.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/luv/convertLuvToXyz50.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lchuv/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/lrgb/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/luv/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/oklab/convertLrgbToOklab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/oklab/convertRgbToOklab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/oklab/convertOklabToLrgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/oklab/convertOklabToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/okhsl/helpers.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/okhsl/convertOklabToOkhsl.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/okhsl/convertOkhslToOklab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/okhsl/modeOkhsl.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/okhsv/convertOklabToOkhsv.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/okhsv/convertOkhsvToOklab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/okhsv/modeOkhsv.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/oklab/parseOklab.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/oklab/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/oklch/parseOklch.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/oklch/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/p3/convertP3ToXyz65.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/p3/convertXyz65ToP3.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/p3/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/prophoto/convertXyz50ToProphoto.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/prophoto/convertProphotoToXyz50.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/prophoto/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/rec2020/convertXyz65ToRec2020.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/rec2020/convertRec2020ToXyz65.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/rec2020/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyb/constants.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyb/convertRgbToXyb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyb/convertXybToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyb/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyz50/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyz65/convertXyz65ToXyz50.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyz65/convertXyz50ToXyz65.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/xyz65/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/yiq/convertRgbToYiq.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/yiq/convertYiqToRgb.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/yiq/definition.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/round.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/formatter.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/blend.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/random.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/map.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/util/normalizePositions.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/easing/midpoint.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/interpolate/interpolate.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/interpolate/splineBasis.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/interpolate/splineNatural.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/interpolate/splineMonotone.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/easing/gamma.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/samples.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/clamp.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/nearest.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/filter.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/deficiency.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/easing/smoothstep.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/easing/smootherstep.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/easing/inOutSine.js", "../../../../node_modules/.pnpm/culori@3.2.0/node_modules/culori/src/wcag.js"],
  "sourcesContent": ["const parseNumber = (color, len) => {\n\tif (typeof color !== 'number') return;\n\n\t// hex3: #c93 -> #cc9933\n\tif (len === 3) {\n\t\treturn {\n\t\t\tmode: 'rgb',\n\t\t\tr: (((color >> 8) & 0xf) | ((color >> 4) & 0xf0)) / 255,\n\t\t\tg: (((color >> 4) & 0xf) | (color & 0xf0)) / 255,\n\t\t\tb: ((color & 0xf) | ((color << 4) & 0xf0)) / 255\n\t\t};\n\t}\n\n\t// hex4: #c931 -> #cc993311\n\tif (len === 4) {\n\t\treturn {\n\t\t\tmode: 'rgb',\n\t\t\tr: (((color >> 12) & 0xf) | ((color >> 8) & 0xf0)) / 255,\n\t\t\tg: (((color >> 8) & 0xf) | ((color >> 4) & 0xf0)) / 255,\n\t\t\tb: (((color >> 4) & 0xf) | (color & 0xf0)) / 255,\n\t\t\talpha: ((color & 0xf) | ((color << 4) & 0xf0)) / 255\n\t\t};\n\t}\n\n\t// hex6: #f0f1f2\n\tif (len === 6) {\n\t\treturn {\n\t\t\tmode: 'rgb',\n\t\t\tr: ((color >> 16) & 0xff) / 255,\n\t\t\tg: ((color >> 8) & 0xff) / 255,\n\t\t\tb: (color & 0xff) / 255\n\t\t};\n\t}\n\n\t// hex8: #f0f1f2ff\n\tif (len === 8) {\n\t\treturn {\n\t\t\tmode: 'rgb',\n\t\t\tr: ((color >> 24) & 0xff) / 255,\n\t\t\tg: ((color >> 16) & 0xff) / 255,\n\t\t\tb: ((color >> 8) & 0xff) / 255,\n\t\t\talpha: (color & 0xff) / 255\n\t\t};\n\t}\n};\n\nexport default parseNumber;\n", "const named = {\n\taliceblue: 0xf0f8ff,\n\tantiquewhite: 0xfaebd7,\n\taqua: 0x00ffff,\n\taquamarine: 0x7fffd4,\n\tazure: 0xf0ffff,\n\tbeige: 0xf5f5dc,\n\tbisque: 0xffe4c4,\n\tblack: 0x000000,\n\tblanchedalmond: 0xffebcd,\n\tblue: 0x0000ff,\n\tblueviolet: 0x8a2be2,\n\tbrown: 0xa52a2a,\n\tburlywood: 0xdeb887,\n\tcadetblue: 0x5f9ea0,\n\tchartreuse: 0x7fff00,\n\tchocolate: 0xd2691e,\n\tcoral: 0xff7f50,\n\tcornflowerblue: 0x6495ed,\n\tcornsilk: 0xfff8dc,\n\tcrimson: 0xdc143c,\n\tcyan: 0x00ffff,\n\tdarkblue: 0x00008b,\n\tdarkcyan: 0x008b8b,\n\tdarkgoldenrod: 0xb8860b,\n\tdarkgray: 0xa9a9a9,\n\tdarkgreen: 0x006400,\n\tdarkgrey: 0xa9a9a9,\n\tdarkkhaki: 0xbdb76b,\n\tdarkmagenta: 0x8b008b,\n\tdarkolivegreen: 0x556b2f,\n\tdarkorange: 0xff8c00,\n\tdarkorchid: 0x9932cc,\n\tdarkred: 0x8b0000,\n\tdarksalmon: 0xe9967a,\n\tdarkseagreen: 0x8fbc8f,\n\tdarkslateblue: 0x483d8b,\n\tdarkslategray: 0x2f4f4f,\n\tdarkslategrey: 0x2f4f4f,\n\tdarkturquoise: 0x00ced1,\n\tdarkviolet: 0x9400d3,\n\tdeeppink: 0xff1493,\n\tdeepskyblue: 0x00bfff,\n\tdimgray: 0x696969,\n\tdimgrey: 0x696969,\n\tdodgerblue: 0x1e90ff,\n\tfirebrick: 0xb22222,\n\tfloralwhite: 0xfffaf0,\n\tforestgreen: 0x228b22,\n\tfuchsia: 0xff00ff,\n\tgainsboro: 0xdcdcdc,\n\tghostwhite: 0xf8f8ff,\n\tgold: 0xffd700,\n\tgoldenrod: 0xdaa520,\n\tgray: 0x808080,\n\tgreen: 0x008000,\n\tgreenyellow: 0xadff2f,\n\tgrey: 0x808080,\n\thoneydew: 0xf0fff0,\n\thotpink: 0xff69b4,\n\tindianred: 0xcd5c5c,\n\tindigo: 0x4b0082,\n\tivory: 0xfffff0,\n\tkhaki: 0xf0e68c,\n\tlavender: 0xe6e6fa,\n\tlavenderblush: 0xfff0f5,\n\tlawngreen: 0x7cfc00,\n\tlemonchiffon: 0xfffacd,\n\tlightblue: 0xadd8e6,\n\tlightcoral: 0xf08080,\n\tlightcyan: 0xe0ffff,\n\tlightgoldenrodyellow: 0xfafad2,\n\tlightgray: 0xd3d3d3,\n\tlightgreen: 0x90ee90,\n\tlightgrey: 0xd3d3d3,\n\tlightpink: 0xffb6c1,\n\tlightsalmon: 0xffa07a,\n\tlightseagreen: 0x20b2aa,\n\tlightskyblue: 0x87cefa,\n\tlightslategray: 0x778899,\n\tlightslategrey: 0x778899,\n\tlightsteelblue: 0xb0c4de,\n\tlightyellow: 0xffffe0,\n\tlime: 0x00ff00,\n\tlimegreen: 0x32cd32,\n\tlinen: 0xfaf0e6,\n\tmagenta: 0xff00ff,\n\tmaroon: 0x800000,\n\tmediumaquamarine: 0x66cdaa,\n\tmediumblue: 0x0000cd,\n\tmediumorchid: 0xba55d3,\n\tmediumpurple: 0x9370db,\n\tmediumseagreen: 0x3cb371,\n\tmediumslateblue: 0x7b68ee,\n\tmediumspringgreen: 0x00fa9a,\n\tmediumturquoise: 0x48d1cc,\n\tmediumvioletred: 0xc71585,\n\tmidnightblue: 0x191970,\n\tmintcream: 0xf5fffa,\n\tmistyrose: 0xffe4e1,\n\tmoccasin: 0xffe4b5,\n\tnavajowhite: 0xffdead,\n\tnavy: 0x000080,\n\toldlace: 0xfdf5e6,\n\tolive: 0x808000,\n\tolivedrab: 0x6b8e23,\n\torange: 0xffa500,\n\torangered: 0xff4500,\n\torchid: 0xda70d6,\n\tpalegoldenrod: 0xeee8aa,\n\tpalegreen: 0x98fb98,\n\tpaleturquoise: 0xafeeee,\n\tpalevioletred: 0xdb7093,\n\tpapayawhip: 0xffefd5,\n\tpeachpuff: 0xffdab9,\n\tperu: 0xcd853f,\n\tpink: 0xffc0cb,\n\tplum: 0xdda0dd,\n\tpowderblue: 0xb0e0e6,\n\tpurple: 0x800080,\n\n\t// Added in CSS Colors Level 4:\n\t// https://drafts.csswg.org/css-color/#changes-from-3\n\trebeccapurple: 0x663399,\n\n\tred: 0xff0000,\n\trosybrown: 0xbc8f8f,\n\troyalblue: 0x4169e1,\n\tsaddlebrown: 0x8b4513,\n\tsalmon: 0xfa8072,\n\tsandybrown: 0xf4a460,\n\tseagreen: 0x2e8b57,\n\tseashell: 0xfff5ee,\n\tsienna: 0xa0522d,\n\tsilver: 0xc0c0c0,\n\tskyblue: 0x87ceeb,\n\tslateblue: 0x6a5acd,\n\tslategray: 0x708090,\n\tslategrey: 0x708090,\n\tsnow: 0xfffafa,\n\tspringgreen: 0x00ff7f,\n\tsteelblue: 0x4682b4,\n\ttan: 0xd2b48c,\n\tteal: 0x008080,\n\tthistle: 0xd8bfd8,\n\ttomato: 0xff6347,\n\tturquoise: 0x40e0d0,\n\tviolet: 0xee82ee,\n\twheat: 0xf5deb3,\n\twhite: 0xffffff,\n\twhitesmoke: 0xf5f5f5,\n\tyellow: 0xffff00,\n\tyellowgreen: 0x9acd32\n};\n\nexport default named;\n", "import parseNumber from './parseNumber.js';\nimport named from '../colors/named.js';\n\n// Also supports the `transparent` color as defined in:\n// https://drafts.csswg.org/css-color/#transparent-black\nconst parseNamed = color => {\n\treturn parseNumber(named[color.toLowerCase()], 6);\n};\n\nexport default parseNamed;\n", "import parseNumber from './parseNumber.js';\n\nconst hex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;\n\nconst parseHex = color => {\n\tlet match;\n\t// eslint-disable-next-line no-cond-assign\n\treturn (match = color.match(hex))\n\t\t? parseNumber(parseInt(match[1], 16), match[1].length)\n\t\t: undefined;\n};\n\nexport default parseHex;\n", "/*\n\tBasic building blocks for color regexes\n\t---------------------------------------\n\n\tThese regexes are expressed as strings\n\tto be interpolated in the color regexes.\n */\n\n// <number>\nexport const num = '([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)';\n\n// <number> or 'none'\nexport const num_none = `(?:${num}|none)`;\n\n// <percentage>\nexport const per = `${num}%`;\n\n// <percent> or 'none'\nexport const per_none = `(?:${num}%|none)`;\n\n// <number-percentage> (<alpha-value>)\nexport const num_per = `(?:${num}%|${num})`;\n\n// <number-percentage> (<alpha-value>) or 'none'\nexport const num_per_none = `(?:${num}%|${num}|none)`;\n\n// <hue>\nexport const hue = `(?:${num}(deg|grad|rad|turn)|${num})`;\n\n// <hue> or 'none'\nexport const hue_none = `(?:${num}(deg|grad|rad|turn)|${num}|none)`;\n\nexport const c = `\\\\s*,\\\\s*`; // comma\nexport const so = '\\\\s*'; // space, optional\nexport const s = `\\\\s+`; // space\n\nexport const rx_num_per_none = new RegExp('^' + num_per_none + '$');\n", "import { num, per, num_per, c } from '../util/regex.js';\n\n/*\n\trgb() regular expressions for legacy format\n\tReference: https://drafts.csswg.org/css-color/#rgb-functions\n */\nconst rgb_num_old = new RegExp(\n\t`^rgba?\\\\(\\\\s*${num}${c}${num}${c}${num}\\\\s*(?:,\\\\s*${num_per}\\\\s*)?\\\\)$`\n);\n\nconst rgb_per_old = new RegExp(\n\t`^rgba?\\\\(\\\\s*${per}${c}${per}${c}${per}\\\\s*(?:,\\\\s*${num_per}\\\\s*)?\\\\)$`\n);\n\nconst parseRgbLegacy = color => {\n\tlet res = { mode: 'rgb' };\n\tlet match;\n\tif ((match = color.match(rgb_num_old))) {\n\t\tif (match[1] !== undefined) {\n\t\t\tres.r = match[1] / 255;\n\t\t}\n\t\tif (match[2] !== undefined) {\n\t\t\tres.g = match[2] / 255;\n\t\t}\n\t\tif (match[3] !== undefined) {\n\t\t\tres.b = match[3] / 255;\n\t\t}\n\t} else if ((match = color.match(rgb_per_old))) {\n\t\tif (match[1] !== undefined) {\n\t\t\tres.r = match[1] / 100;\n\t\t}\n\t\tif (match[2] !== undefined) {\n\t\t\tres.g = match[2] / 100;\n\t\t}\n\t\tif (match[3] !== undefined) {\n\t\t\tres.b = match[3] / 100;\n\t\t}\n\t} else {\n\t\treturn undefined;\n\t}\n\n\tif (match[4] !== undefined) {\n\t\tres.alpha = match[4] / 100;\n\t} else if (match[5] !== undefined) {\n\t\tres.alpha = +match[5];\n\t}\n\n\treturn res;\n};\n\nexport default parseRgbLegacy;\n", "import parse from './parse.js';\n\nconst prepare = (color, mode) =>\n\tcolor === undefined\n\t\t? undefined\n\t\t: typeof color !== 'object'\n\t\t? parse(color)\n\t\t: color.mode !== undefined\n\t\t? color\n\t\t: mode\n\t\t? { ...color, mode }\n\t\t: undefined;\n\nexport default prepare;\n", "import { converters } from './modes.js';\nimport prepare from './_prepare.js';\n\nconst converter =\n\t(target_mode = 'rgb') =>\n\tcolor =>\n\t\t(color = prepare(color, target_mode)) !== undefined\n\t\t\t? // if the color's mode corresponds to our target mode\n\t\t\t  color.mode === target_mode\n\t\t\t\t? // then just return the color\n\t\t\t\t  color\n\t\t\t\t: // otherwise check to see if we have a dedicated\n\t\t\t\t// converter for the target mode\n\t\t\t\tconverters[color.mode][target_mode]\n\t\t\t\t? // and return its result...\n\t\t\t\t  converters[color.mode][target_mode](color)\n\t\t\t\t: // ...otherwise pass through RGB as an intermediary step.\n\t\t\t\t// if the target mode is RGB...\n\t\t\t\ttarget_mode === 'rgb'\n\t\t\t\t? // just return the RGB\n\t\t\t\t  converters[color.mode].rgb(color)\n\t\t\t\t: // otherwise convert color.mode -> RGB -> target_mode\n\t\t\t\t  converters.rgb[target_mode](converters[color.mode].rgb(color))\n\t\t\t: undefined;\n\nexport default converter;\n", "import converter from './converter.js';\n\nconst converters = {};\nconst modes = {};\n\nconst parsers = [];\nconst colorProfiles = {};\n\nconst identity = v => v;\n\nconst useMode = definition => {\n\tconverters[definition.mode] = {\n\t\t...converters[definition.mode],\n\t\t...definition.toMode\n\t};\n\n\tObject.keys(definition.fromMode || {}).forEach(k => {\n\t\tif (!converters[k]) {\n\t\t\tconverters[k] = {};\n\t\t}\n\t\tconverters[k][definition.mode] = definition.fromMode[k];\n\t});\n\n\t// Color space channel ranges\n\tif (!definition.ranges) {\n\t\tdefinition.ranges = {};\n\t}\n\n\tif (!definition.difference) {\n\t\tdefinition.difference = {};\n\t}\n\n\tdefinition.channels.forEach(channel => {\n\t\t// undefined channel ranges default to the [0, 1] interval\n\t\tif (definition.ranges[channel] === undefined) {\n\t\t\tdefinition.ranges[channel] = [0, 1];\n\t\t}\n\n\t\tif (!definition.interpolate[channel]) {\n\t\t\tthrow new Error(`Missing interpolator for: ${channel}`);\n\t\t}\n\n\t\tif (typeof definition.interpolate[channel] === 'function') {\n\t\t\tdefinition.interpolate[channel] = {\n\t\t\t\tuse: definition.interpolate[channel]\n\t\t\t};\n\t\t}\n\n\t\tif (!definition.interpolate[channel].fixup) {\n\t\t\tdefinition.interpolate[channel].fixup = identity;\n\t\t}\n\t});\n\n\tmodes[definition.mode] = definition;\n\t(definition.parse || []).forEach(parser => {\n\t\tuseParser(parser, definition.mode);\n\t});\n\n\treturn converter(definition.mode);\n};\n\nconst getMode = mode => modes[mode];\n\nconst useParser = (parser, mode) => {\n\tif (typeof parser === 'string') {\n\t\tif (!mode) {\n\t\t\tthrow new Error(`'mode' required when 'parser' is a string`);\n\t\t}\n\t\tcolorProfiles[parser] = mode;\n\t} else if (typeof parser === 'function') {\n\t\tif (parsers.indexOf(parser) < 0) {\n\t\t\tparsers.push(parser);\n\t\t}\n\t}\n};\n\nconst removeParser = parser => {\n\tif (typeof parser === 'string') {\n\t\tdelete colorProfiles[parser];\n\t} else if (typeof parser === 'function') {\n\t\tconst idx = parsers.indexOf(parser);\n\t\tif (idx > 0) {\n\t\t\tparsers.splice(idx, 1);\n\t\t}\n\t}\n};\n\nexport {\n\tuseMode,\n\tgetMode,\n\tuseParser,\n\tremoveParser,\n\tconverters,\n\tparsers,\n\tcolorProfiles\n};\n", "import { parsers, colorProfiles, getMode } from './modes.js';\n\n/* eslint-disable-next-line no-control-regex */\nconst IdentStartCodePoint = /[^\\x00-\\x7F]|[a-zA-Z_]/;\n\n/* eslint-disable-next-line no-control-regex */\nconst IdentCodePoint = /[^\\x00-\\x7F]|[-\\w]/;\n\nexport const Tok = {\n\tFunction: 'function',\n\tIdent: 'ident',\n\tNumber: 'number',\n\tPercentage: 'percentage',\n\tParenClose: ')',\n\tNone: 'none',\n\tHue: 'hue',\n\tAlpha: 'alpha'\n};\n\nlet _i = 0;\n\n/*\n\t4.3.10. Check if three code points would start a number\n\thttps://drafts.csswg.org/css-syntax/#starts-with-a-number\n */\nfunction is_num(chars) {\n\tlet ch = chars[_i];\n\tlet ch1 = chars[_i + 1];\n\tif (ch === '-' || ch === '+') {\n\t\treturn /\\d/.test(ch1) || (ch1 === '.' && /\\d/.test(chars[_i + 2]));\n\t}\n\tif (ch === '.') {\n\t\treturn /\\d/.test(ch1);\n\t}\n\treturn /\\d/.test(ch);\n}\n\n/*\n\tCheck if the stream starts with an identifier.\n */\n\nfunction is_ident(chars) {\n\tif (_i >= chars.length) {\n\t\treturn false;\n\t}\n\tlet ch = chars[_i];\n\tif (IdentStartCodePoint.test(ch)) {\n\t\treturn true;\n\t}\n\tif (ch === '-') {\n\t\tif (chars.length - _i < 2) {\n\t\t\treturn false;\n\t\t}\n\t\tlet ch1 = chars[_i + 1];\n\t\tif (ch1 === '-' || IdentStartCodePoint.test(ch1)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\treturn false;\n}\n\n/*\n\t4.3.3. Consume a numeric token\n\thttps://drafts.csswg.org/css-syntax/#consume-numeric-token\n */\n\nconst huenits = {\n\tdeg: 1,\n\trad: 180 / Math.PI,\n\tgrad: 9 / 10,\n\tturn: 360\n};\n\nfunction num(chars) {\n\tlet value = '';\n\tif (chars[_i] === '-' || chars[_i] === '+') {\n\t\tvalue += chars[_i++];\n\t}\n\tvalue += digits(chars);\n\tif (chars[_i] === '.' && /\\d/.test(chars[_i + 1])) {\n\t\tvalue += chars[_i++] + digits(chars);\n\t}\n\tif (chars[_i] === 'e' || chars[_i] === 'E') {\n\t\tif (\n\t\t\t(chars[_i + 1] === '-' || chars[_i + 1] === '+') &&\n\t\t\t/\\d/.test(chars[_i + 2])\n\t\t) {\n\t\t\tvalue += chars[_i++] + chars[_i++] + digits(chars);\n\t\t} else if (/\\d/.test(chars[_i + 1])) {\n\t\t\tvalue += chars[_i++] + digits(chars);\n\t\t}\n\t}\n\tif (is_ident(chars)) {\n\t\tlet id = ident(chars);\n\t\tif (id === 'deg' || id === 'rad' || id === 'turn' || id === 'grad') {\n\t\t\treturn { type: Tok.Hue, value: value * huenits[id] };\n\t\t}\n\t\treturn undefined;\n\t}\n\tif (chars[_i] === '%') {\n\t\t_i++;\n\t\treturn { type: Tok.Percentage, value: +value };\n\t}\n\treturn { type: Tok.Number, value: +value };\n}\n\n/*\n\tConsume digits.\n */\nfunction digits(chars) {\n\tlet v = '';\n\twhile (/\\d/.test(chars[_i])) {\n\t\tv += chars[_i++];\n\t}\n\treturn v;\n}\n\n/*\n\tConsume an identifier.\n */\nfunction ident(chars) {\n\tlet v = '';\n\twhile (_i < chars.length && IdentCodePoint.test(chars[_i])) {\n\t\tv += chars[_i++];\n\t}\n\treturn v;\n}\n\n/*\n\tConsume an ident-like token.\n */\nfunction identlike(chars) {\n\tlet v = ident(chars);\n\tif (chars[_i] === '(') {\n\t\t_i++;\n\t\treturn { type: Tok.Function, value: v };\n\t}\n\tif (v === 'none') {\n\t\treturn { type: Tok.None, value: undefined };\n\t}\n\treturn { type: Tok.Ident, value: v };\n}\n\nexport function tokenize(str = '') {\n\tlet chars = str.trim();\n\tlet tokens = [];\n\tlet ch;\n\n\t/* reset counter */\n\t_i = 0;\n\n\twhile (_i < chars.length) {\n\t\tch = chars[_i++];\n\n\t\t/*\n\t\t\tConsume whitespace without emitting it\n\t\t */\n\t\tif (ch === '\\n' || ch === '\\t' || ch === ' ') {\n\t\t\twhile (\n\t\t\t\t_i < chars.length &&\n\t\t\t\t(chars[_i] === '\\n' || chars[_i] === '\\t' || chars[_i] === ' ')\n\t\t\t) {\n\t\t\t\t_i++;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (ch === ',') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (ch === ')') {\n\t\t\ttokens.push({ type: Tok.ParenClose });\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (ch === '+') {\n\t\t\t_i--;\n\t\t\tif (is_num(chars)) {\n\t\t\t\ttokens.push(num(chars));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (ch === '-') {\n\t\t\t_i--;\n\t\t\tif (is_num(chars)) {\n\t\t\t\ttokens.push(num(chars));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (is_ident(chars)) {\n\t\t\t\ttokens.push({ type: Tok.Ident, value: ident(chars) });\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (ch === '.') {\n\t\t\t_i--;\n\t\t\tif (is_num(chars)) {\n\t\t\t\ttokens.push(num(chars));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (ch === '/') {\n\t\t\twhile (\n\t\t\t\t_i < chars.length &&\n\t\t\t\t(chars[_i] === '\\n' || chars[_i] === '\\t' || chars[_i] === ' ')\n\t\t\t) {\n\t\t\t\t_i++;\n\t\t\t}\n\t\t\tlet alpha;\n\t\t\tif (is_num(chars)) {\n\t\t\t\talpha = num(chars);\n\t\t\t\tif (alpha.type !== Tok.Hue) {\n\t\t\t\t\ttokens.push({ type: Tok.Alpha, value: alpha });\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (is_ident(chars)) {\n\t\t\t\tif (ident(chars) === 'none') {\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\ttype: Tok.Alpha,\n\t\t\t\t\t\tvalue: { type: Tok.None, value: undefined }\n\t\t\t\t\t});\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (/\\d/.test(ch)) {\n\t\t\t_i--;\n\t\t\ttokens.push(num(chars));\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (IdentStartCodePoint.test(ch)) {\n\t\t\t_i--;\n\t\t\ttokens.push(identlike(chars));\n\t\t\tcontinue;\n\t\t}\n\n\t\t/*\n\t\t\tTreat everything not already handled as an error.\n\t\t */\n\t\treturn undefined;\n\t}\n\n\treturn tokens;\n}\n\nexport function parseColorSyntax(tokens) {\n\ttokens._i = 0;\n\tlet token = tokens[tokens._i++];\n\tif (!token || token.type !== Tok.Function || token.value !== 'color') {\n\t\treturn undefined;\n\t}\n\ttoken = tokens[tokens._i++];\n\tif (token.type !== Tok.Ident) {\n\t\treturn undefined;\n\t}\n\tconst mode = colorProfiles[token.value];\n\tif (!mode) {\n\t\treturn undefined;\n\t}\n\tconst res = { mode };\n\tconst coords = consumeCoords(tokens, false);\n\tif (!coords) {\n\t\treturn undefined;\n\t}\n\tconst channels = getMode(mode).channels;\n\tfor (let ii = 0, c; ii < channels.length; ii++) {\n\t\tc = coords[ii];\n\t\tif (c.type !== Tok.None) {\n\t\t\tres[channels[ii]] = c.type === Tok.Number ? c.value : c.value / 100;\n\t\t}\n\t}\n\treturn res;\n}\n\nfunction consumeCoords(tokens, includeHue) {\n\tconst coords = [];\n\tlet token;\n\twhile (tokens._i < tokens.length) {\n\t\ttoken = tokens[tokens._i++];\n\t\tif (\n\t\t\ttoken.type === Tok.None ||\n\t\t\ttoken.type === Tok.Number ||\n\t\t\ttoken.type === Tok.Alpha ||\n\t\t\ttoken.type === Tok.Percentage ||\n\t\t\t(includeHue && token.type === Tok.Hue)\n\t\t) {\n\t\t\tcoords.push(token);\n\t\t\tcontinue;\n\t\t}\n\t\tif (token.type === Tok.ParenClose) {\n\t\t\tif (tokens._i < tokens.length) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tif (coords.length < 3 || coords.length > 4) {\n\t\treturn undefined;\n\t}\n\n\tif (coords.length === 4) {\n\t\tif (coords[3].type !== Tok.Alpha) {\n\t\t\treturn undefined;\n\t\t}\n\t\tcoords[3] = coords[3].value;\n\t}\n\tif (coords.length === 3) {\n\t\tcoords.push({ type: Tok.None, value: undefined });\n\t}\n\n\treturn coords.every(c => c.type !== Tok.Alpha) ? coords : undefined;\n}\n\nexport function parseModernSyntax(tokens, includeHue) {\n\ttokens._i = 0;\n\tlet token = tokens[tokens._i++];\n\tif (!token || token.type !== Tok.Function) {\n\t\treturn undefined;\n\t}\n\tlet coords = consumeCoords(tokens, includeHue);\n\tif (!coords) {\n\t\treturn undefined;\n\t}\n\tcoords.unshift(token.value);\n\treturn coords;\n}\n\nconst parse = color => {\n\tif (typeof color !== 'string') {\n\t\treturn undefined;\n\t}\n\tconst tokens = tokenize(color);\n\tconst parsed = tokens ? parseModernSyntax(tokens, true) : undefined;\n\tlet result = undefined;\n\tlet i = 0;\n\tlet len = parsers.length;\n\twhile (i < len) {\n\t\tif ((result = parsers[i++](color, parsed)) !== undefined) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn tokens ? parseColorSyntax(tokens) : undefined;\n};\n\nexport default parse;\n", "import { Tok } from '../parse.js';\n\nfunction parseRgb(color, parsed) {\n\tif (!parsed || (parsed[0] !== 'rgb' && parsed[0] !== 'rgba')) {\n\t\treturn undefined;\n\t}\n\tconst res = { mode: 'rgb' };\n\tconst [, r, g, b, alpha] = parsed;\n\tif (r.type === Tok.Hue || g.type === Tok.Hue || b.type === Tok.Hue) {\n\t\treturn undefined;\n\t}\n\tif (r.type !== Tok.None) {\n\t\tres.r = r.type === Tok.Number ? r.value / 255 : r.value / 100;\n\t}\n\tif (g.type !== Tok.None) {\n\t\tres.g = g.type === Tok.Number ? g.value / 255 : g.value / 100;\n\t}\n\tif (b.type !== Tok.None) {\n\t\tres.b = b.type === Tok.Number ? b.value / 255 : b.value / 100;\n\t}\n\tif (alpha.type !== Tok.None) {\n\t\tres.alpha = alpha.type === Tok.Number ? alpha.value : alpha.value / 100;\n\t}\n\n\treturn res;\n}\n\nexport default parseRgb;\n", "const parseTransparent = c =>\n\tc === 'transparent'\n\t\t? { mode: 'rgb', r: 0, g: 0, b: 0, alpha: 0 }\n\t\t: undefined;\n\nexport default parseTransparent;\n", "const lerp = (a, b, t) => a + t * (b - a);\nconst unlerp = (a, b, v) => (v - a) / (b - a);\n\nconst blerp = (a00, a01, a10, a11, tx, ty) => {\n\treturn lerp(lerp(a00, a01, tx), lerp(a10, a11, tx), ty);\n};\n\nconst trilerp = (\n\ta000,\n\ta010,\n\ta100,\n\ta110,\n\ta001,\n\ta011,\n\ta101,\n\ta111,\n\ttx,\n\tty,\n\ttz\n) => {\n\treturn lerp(\n\t\tblerp(a000, a010, a100, a110, tx, ty),\n\t\tblerp(a001, a011, a101, a111, tx, ty),\n\t\ttz\n\t);\n};\n\nexport { lerp, blerp, trilerp, unlerp };\n", "const get_classes = arr => {\n\tlet classes = [];\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tlet a = arr[i];\n\t\tlet b = arr[i + 1];\n\t\tif (a === undefined && b === undefined) {\n\t\t\tclasses.push(undefined);\n\t\t} else if (a !== undefined && b !== undefined) {\n\t\t\tclasses.push([a, b]);\n\t\t} else {\n\t\t\tclasses.push(a !== undefined ? [a, a] : [b, b]);\n\t\t}\n\t}\n\treturn classes;\n};\n\nconst interpolatorPiecewise = interpolator => arr => {\n\tlet classes = get_classes(arr);\n\treturn t => {\n\t\tlet cls = t * classes.length;\n\t\tlet idx = t >= 1 ? classes.length - 1 : Math.max(Math.floor(cls), 0);\n\t\tlet pair = classes[idx];\n\t\treturn pair === undefined\n\t\t\t? undefined\n\t\t\t: interpolator(pair[0], pair[1], cls - idx);\n\t};\n};\n\nexport { interpolatorPiecewise };\n", "import { lerp } from './lerp.js';\nimport { interpolatorPiecewise } from './piecewise.js';\n\nexport const interpolatorLinear = interpolatorPiecewise(lerp);\n", "const fixupAlpha = arr => {\n\tlet some_defined = false;\n\tlet res = arr.map(v => {\n\t\tif (v !== undefined) {\n\t\t\tsome_defined = true;\n\t\t\treturn v;\n\t\t}\n\t\treturn 1;\n\t});\n\treturn some_defined ? res : arr;\n};\n\nexport { fixupAlpha };\n", "import parseNamed from './parseNamed.js';\nimport parseHex from './parseHex.js';\nimport parseRgbLegacy from './parseRgbLegacy.js';\nimport parseRgb from './parseRgb.js';\nimport parseTransparent from './parseTransparent.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\n\n/*\n\tsRGB color space\n */\n\nconst definition = {\n\tmode: 'rgb',\n\tchannels: ['r', 'g', 'b', 'alpha'],\n\tparse: [\n\t\tparseRgb,\n\t\tparseHex,\n\t\tparseRgbLegacy,\n\t\tparseNamed,\n\t\tparseTransparent,\n\t\t'srgb'\n\t],\n\tserialize: 'srgb',\n\tinterpolate: {\n\t\tr: interpolatorLinear,\n\t\tg: interpolatorLinear,\n\t\tb: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t},\n\tgamut: true\n};\n\nexport default definition;\n", "/*\n\tConvert A98 RGB values to CIE XYZ D65\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\t\t* https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf\n*/\n\nconst linearize = v => Math.pow(Math.abs(v), 563 / 256) * Math.sign(v);\n\nconst convertA98ToXyz65 = a98 => {\n\tlet r = linearize(a98.r);\n\tlet g = linearize(a98.g);\n\tlet b = linearize(a98.b);\n\tlet res = {\n\t\tmode: 'xyz65',\n\t\tx:\n\t\t\t0.5766690429101305 * r +\n\t\t\t0.1855582379065463 * g +\n\t\t\t0.1882286462349947 * b,\n\t\ty:\n\t\t\t0.297344975250536 * r +\n\t\t\t0.6273635662554661 * g +\n\t\t\t0.0752914584939979 * b,\n\t\tz:\n\t\t\t0.0270313613864123 * r +\n\t\t\t0.0706888525358272 * g +\n\t\t\t0.9913375368376386 * b\n\t};\n\tif (a98.alpha !== undefined) {\n\t\tres.alpha = a98.alpha;\n\t}\n\treturn res;\n};\n\nexport default convertA98ToXyz65;\n", "/*\n\tConvert CIE XYZ D65 values to A98 RGB\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n*/\n\nconst gamma = v => Math.pow(Math.abs(v), 256 / 563) * Math.sign(v);\n\nconst convertXyz65ToA98 = ({ x, y, z, alpha }) => {\n\tlet res = {\n\t\tmode: 'a98',\n\t\tr: gamma(\n\t\t\tx * 2.0415879038107465 -\n\t\t\t\ty * 0.5650069742788597 -\n\t\t\t\t0.3447313507783297 * z\n\t\t),\n\t\tg: gamma(\n\t\t\tx * -0.9692436362808798 +\n\t\t\t\ty * 1.8759675015077206 +\n\t\t\t\t0.0415550574071756 * z\n\t\t),\n\t\tb: gamma(\n\t\t\tx * 0.0134442806320312 -\n\t\t\t\ty * 0.1183623922310184 +\n\t\t\t\t1.0151749943912058 * z\n\t\t)\n\t};\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertXyz65ToA98;\n", "const fn = c => {\n\tconst abs = Math.abs(c);\n\tif (abs < 0.04045) {\n\t\treturn c / 12.92;\n\t}\n\treturn (Math.sign(c) || 1) * Math.pow((abs + 0.055) / 1.055, 2.4);\n};\n\nconst convertRgbToLrgb = ({ r, g, b, alpha }) => {\n\tlet res = {\n\t\tmode: 'lrgb',\n\t\tr: fn(r),\n\t\tg: fn(g),\n\t\tb: fn(b)\n\t};\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertRgbToLrgb;\n", "/*\n\tConvert sRGB values to CIE XYZ D65\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\t\t* https://observablehq.com/@danburzo/color-matrix-calculator\n*/\n\nimport convertRgbToLrgb from '../lrgb/convertRgbToLrgb.js';\n\nconst convertRgbToXyz65 = rgb => {\n\tlet { r, g, b, alpha } = convertRgbToLrgb(rgb);\n\tlet res = {\n\t\tmode: 'xyz65',\n\t\tx:\n\t\t\t0.4123907992659593 * r +\n\t\t\t0.357584339383878 * g +\n\t\t\t0.1804807884018343 * b,\n\t\ty:\n\t\t\t0.2126390058715102 * r +\n\t\t\t0.715168678767756 * g +\n\t\t\t0.0721923153607337 * b,\n\t\tz:\n\t\t\t0.0193308187155918 * r +\n\t\t\t0.119194779794626 * g +\n\t\t\t0.9505321522496607 * b\n\t};\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertRgbToXyz65;\n", "const fn = c => {\n\tconst abs = Math.abs(c);\n\tif (abs > 0.0031308) {\n\t\treturn (Math.sign(c) || 1) * (1.055 * Math.pow(abs, 1 / 2.4) - 0.055);\n\t}\n\treturn c * 12.92;\n};\n\nconst convertLrgbToRgb = ({ r, g, b, alpha }, mode = 'rgb') => {\n\tlet res = {\n\t\tmode,\n\t\tr: fn(r),\n\t\tg: fn(g),\n\t\tb: fn(b)\n\t};\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertLrgbToRgb;\n", "/*\n\tCIE XYZ D65 values to sRGB.\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\t\t* https://observablehq.com/@danburzo/color-matrix-calculator\n*/\n\nimport convertLrgbToRgb from '../lrgb/convertLrgbToRgb.js';\n\nconst convertXyz65ToRgb = ({ x, y, z, alpha }) => {\n\tlet res = convertLrgbToRgb({\n\t\tr:\n\t\t\tx * 3.2409699419045226 -\n\t\t\ty * 1.5373831775700939 -\n\t\t\t0.4986107602930034 * z,\n\t\tg:\n\t\t\tx * -0.9692436362808796 +\n\t\t\ty * 1.8759675015077204 +\n\t\t\t0.0415550574071756 * z,\n\t\tb:\n\t\t\tx * 0.0556300796969936 -\n\t\t\ty * 0.2039769588889765 +\n\t\t\t1.0569715142428784 * z\n\t});\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertXyz65ToRgb;\n", "import rgb from '../rgb/definition.js';\n\nimport convertA98ToXyz65 from './convertA98ToXyz65.js';\nimport convertXyz65ToA98 from './convertXyz65ToA98.js';\nimport convertRgbToXyz65 from '../xyz65/convertRgbToXyz65.js';\nimport convertXyz65ToRgb from '../xyz65/convertXyz65ToRgb.js';\n\nconst definition = {\n\t...rgb,\n\tmode: 'a98',\n\tparse: ['a98-rgb'],\n\tserialize: 'a98-rgb',\n\n\tfromMode: {\n\t\trgb: color => convertXyz65ToA98(convertRgbToXyz65(color)),\n\t\txyz65: convertXyz65ToA98\n\t},\n\n\ttoMode: {\n\t\trgb: color => convertXyz65ToRgb(convertA98ToXyz65(color)),\n\t\txyz65: convertA98ToXyz65\n\t}\n};\n\nexport default definition;\n", "const normalizeHue = hue => ((hue = hue % 360) < 0 ? hue + 360 : hue);\n\nexport default normalizeHue;\n", "import normalizeHue from '../util/normalizeHue.js';\n\nconst hue = (hues, fn) => {\n\treturn hues\n\t\t.map((hue, idx, arr) => {\n\t\t\tif (hue === undefined) {\n\t\t\t\treturn hue;\n\t\t\t}\n\t\t\tlet normalized = normalizeHue(hue);\n\t\t\tif (idx === 0 || hues[idx - 1] === undefined) {\n\t\t\t\treturn normalized;\n\t\t\t}\n\t\t\treturn fn(normalized - normalizeHue(arr[idx - 1]));\n\t\t})\n\t\t.reduce((acc, curr) => {\n\t\t\tif (\n\t\t\t\t!acc.length ||\n\t\t\t\tcurr === undefined ||\n\t\t\t\tacc[acc.length - 1] === undefined\n\t\t\t) {\n\t\t\t\tacc.push(curr);\n\t\t\t\treturn acc;\n\t\t\t}\n\t\t\tacc.push(curr + acc[acc.length - 1]);\n\t\t\treturn acc;\n\t\t}, []);\n};\n\nconst fixupHueShorter = arr =>\n\thue(arr, d => (Math.abs(d) <= 180 ? d : d - 360 * Math.sign(d)));\nconst fixupHueLonger = arr =>\n\thue(arr, d => (Math.abs(d) >= 180 || d === 0 ? d : d - 360 * Math.sign(d)));\nconst fixupHueIncreasing = arr => hue(arr, d => (d >= 0 ? d : d + 360));\nconst fixupHueDecreasing = arr => hue(arr, d => (d <= 0 ? d : d - 360));\n\nexport {\n\tfixupHueShorter,\n\tfixupHueLonger,\n\tfixupHueIncreasing,\n\tfixupHueDecreasing\n};\n", "export const M = [-0.14861, 1.78277, -0.29227, -0.90649, 1.97294, 0];\n\nexport const degToRad = Math.PI / 180;\nexport const radToDeg = 180 / Math.PI;\n", "/*\n\tConvert a RGB color to the Cubehelix HSL color space.\n\n\tThis computation is not present in Green's paper:\n\thttps://arxiv.org/pdf/1108.5083.pdf\n\n\t...but can be derived from the inverse, HSL to RGB conversion.\n\n\tIt matches the math in Mike Bostock's D3 implementation:\n\n\thttps://github.com/d3/d3-color/blob/master/src/cubehelix.js\n */\n\nimport { radToDeg, M } from './constants.js';\n\nlet DE = M[3] * M[4];\nlet BE = M[1] * M[4];\nlet BCAD = M[1] * M[2] - M[0] * M[3];\n\nconst convertRgbToCubehelix = ({ r, g, b, alpha }) => {\n\tlet l = (BCAD * b + r * DE - g * BE) / (BCAD + DE - BE);\n\tlet x = b - l;\n\tlet y = (M[4] * (g - l) - M[2] * x) / M[3];\n\n\tlet res = {\n\t\tmode: 'cubehelix',\n\t\tl: l,\n\t\ts:\n\t\t\tl === 0 || l === 1\n\t\t\t\t? undefined\n\t\t\t\t: Math.sqrt(x * x + y * y) / (M[4] * l * (1 - l))\n\t};\n\n\tif (res.s) res.h = Math.atan2(y, x) * radToDeg - 120;\n\tif (alpha !== undefined) res.alpha = alpha;\n\n\treturn res;\n};\n\nexport default convertRgbToCubehelix;\n", "import { degToRad, M } from './constants.js';\n\nconst convertCubehelixToRgb = ({ h, s, l, alpha }) => {\n\tlet res = { mode: 'rgb' };\n\n\th = (h === undefined ? 0 : h + 120) * degToRad;\n\n\tlet amp = s === undefined ? 0 : s * l * (1 - l);\n\n\tlet cosh = Math.cos(h);\n\tlet sinh = Math.sin(h);\n\n\tres.r = l + amp * (M[0] * cosh + M[1] * sinh);\n\tres.g = l + amp * (M[2] * cosh + M[3] * sinh);\n\tres.b = l + amp * (M[4] * cosh + M[5] * sinh);\n\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertCubehelixToRgb;\n", "import { getMode } from './modes.js';\nimport converter from './converter.js';\nimport normalizeHue from './util/normalizeHue.js';\n\nconst differenceHueSaturation = (std, smp) => {\n\tif (std.h === undefined || smp.h === undefined || !std.s || !smp.s) {\n\t\treturn 0;\n\t}\n\tlet std_h = normalizeHue(std.h);\n\tlet smp_h = normalizeHue(smp.h);\n\tlet dH = Math.sin((((smp_h - std_h + 360) / 2) * Math.PI) / 180);\n\treturn 2 * Math.sqrt(std.s * smp.s) * dH;\n};\n\nconst differenceHueNaive = (std, smp) => {\n\tif (std.h === undefined || smp.h === undefined) {\n\t\treturn 0;\n\t}\n\tlet std_h = normalizeHue(std.h);\n\tlet smp_h = normalizeHue(smp.h);\n\tif (Math.abs(smp_h - std_h) > 180) {\n\t\t// todo should this be normalized once again?\n\t\treturn std_h - (smp_h - 360 * Math.sign(smp_h - std_h));\n\t}\n\treturn smp_h - std_h;\n};\n\nconst differenceHueChroma = (std, smp) => {\n\tif (std.h === undefined || smp.h === undefined || !std.c || !smp.c) {\n\t\treturn 0;\n\t}\n\tlet std_h = normalizeHue(std.h);\n\tlet smp_h = normalizeHue(smp.h);\n\tlet dH = Math.sin((((smp_h - std_h + 360) / 2) * Math.PI) / 180);\n\treturn 2 * Math.sqrt(std.c * smp.c) * dH;\n};\n\nconst differenceEuclidean = (mode = 'rgb', weights = [1, 1, 1, 0]) => {\n\tlet def = getMode(mode);\n\tlet channels = def.channels;\n\tlet diffs = def.difference;\n\tlet conv = converter(mode);\n\treturn (std, smp) => {\n\t\tlet ConvStd = conv(std);\n\t\tlet ConvSmp = conv(smp);\n\t\treturn Math.sqrt(\n\t\t\tchannels.reduce((sum, k, idx) => {\n\t\t\t\tlet delta = diffs[k]\n\t\t\t\t\t? diffs[k](ConvStd, ConvSmp)\n\t\t\t\t\t: ConvStd[k] - ConvSmp[k];\n\t\t\t\treturn (\n\t\t\t\t\tsum +\n\t\t\t\t\t(weights[idx] || 0) * Math.pow(isNaN(delta) ? 0 : delta, 2)\n\t\t\t\t);\n\t\t\t}, 0)\n\t\t);\n\t};\n};\n\nconst differenceCie76 = () => differenceEuclidean('lab65');\n\nconst differenceCie94 = (kL = 1, K1 = 0.045, K2 = 0.015) => {\n\tlet lab = converter('lab65');\n\n\treturn (std, smp) => {\n\t\tlet LabStd = lab(std);\n\t\tlet LabSmp = lab(smp);\n\n\t\t// Extract Lab values, and compute Chroma\n\t\tlet lStd = LabStd.l;\n\t\tlet aStd = LabStd.a;\n\t\tlet bStd = LabStd.b;\n\t\tlet cStd = Math.sqrt(aStd * aStd + bStd * bStd);\n\n\t\tlet lSmp = LabSmp.l;\n\t\tlet aSmp = LabSmp.a;\n\t\tlet bSmp = LabSmp.b;\n\t\tlet cSmp = Math.sqrt(aSmp * aSmp + bSmp * bSmp);\n\n\t\tlet dL2 = Math.pow(lStd - lSmp, 2);\n\t\tlet dC2 = Math.pow(cStd - cSmp, 2);\n\t\tlet dH2 = Math.pow(aStd - aSmp, 2) + Math.pow(bStd - bSmp, 2) - dC2;\n\n\t\treturn Math.sqrt(\n\t\t\tdL2 / Math.pow(kL, 2) +\n\t\t\t\tdC2 / Math.pow(1 + K1 * cStd, 2) +\n\t\t\t\tdH2 / Math.pow(1 + K2 * cStd, 2)\n\t\t);\n\t};\n};\n\n/*\n\tCIEDE2000 color difference, original Matlab implementation by Gaurav Sharma\n\tBased on \"The CIEDE2000 Color-Difference Formula: Implementation Notes, Supplementary Test Data, and Mathematical Observations\" \n\tby Gaurav Sharma, Wencheng Wu, Edul N. Dalal in Color Research and Application, vol. 30. No. 1, pp. 21-30, February 2005.\n\thttp://www2.ece.rochester.edu/~gsharma/ciede2000/\n */\n\nconst differenceCiede2000 = (Kl = 1, Kc = 1, Kh = 1) => {\n\tlet lab = converter('lab65');\n\treturn (std, smp) => {\n\t\tlet LabStd = lab(std);\n\t\tlet LabSmp = lab(smp);\n\n\t\tlet lStd = LabStd.l;\n\t\tlet aStd = LabStd.a;\n\t\tlet bStd = LabStd.b;\n\t\tlet cStd = Math.sqrt(aStd * aStd + bStd * bStd);\n\n\t\tlet lSmp = LabSmp.l;\n\t\tlet aSmp = LabSmp.a;\n\t\tlet bSmp = LabSmp.b;\n\t\tlet cSmp = Math.sqrt(aSmp * aSmp + bSmp * bSmp);\n\n\t\tlet cAvg = (cStd + cSmp) / 2;\n\n\t\tlet G =\n\t\t\t0.5 *\n\t\t\t(1 -\n\t\t\t\tMath.sqrt(\n\t\t\t\t\tMath.pow(cAvg, 7) / (Math.pow(cAvg, 7) + Math.pow(25, 7))\n\t\t\t\t));\n\n\t\tlet apStd = aStd * (1 + G);\n\t\tlet apSmp = aSmp * (1 + G);\n\n\t\tlet cpStd = Math.sqrt(apStd * apStd + bStd * bStd);\n\t\tlet cpSmp = Math.sqrt(apSmp * apSmp + bSmp * bSmp);\n\n\t\tlet hpStd =\n\t\t\tMath.abs(apStd) + Math.abs(bStd) === 0\n\t\t\t\t? 0\n\t\t\t\t: Math.atan2(bStd, apStd);\n\t\thpStd += (hpStd < 0) * 2 * Math.PI;\n\n\t\tlet hpSmp =\n\t\t\tMath.abs(apSmp) + Math.abs(bSmp) === 0\n\t\t\t\t? 0\n\t\t\t\t: Math.atan2(bSmp, apSmp);\n\t\thpSmp += (hpSmp < 0) * 2 * Math.PI;\n\n\t\tlet dL = lSmp - lStd;\n\t\tlet dC = cpSmp - cpStd;\n\n\t\tlet dhp = cpStd * cpSmp === 0 ? 0 : hpSmp - hpStd;\n\t\tdhp -= (dhp > Math.PI) * 2 * Math.PI;\n\t\tdhp += (dhp < -Math.PI) * 2 * Math.PI;\n\n\t\tlet dH = 2 * Math.sqrt(cpStd * cpSmp) * Math.sin(dhp / 2);\n\n\t\tlet Lp = (lStd + lSmp) / 2;\n\t\tlet Cp = (cpStd + cpSmp) / 2;\n\n\t\tlet hp;\n\t\tif (cpStd * cpSmp === 0) {\n\t\t\thp = hpStd + hpSmp;\n\t\t} else {\n\t\t\thp = (hpStd + hpSmp) / 2;\n\t\t\thp -= (Math.abs(hpStd - hpSmp) > Math.PI) * Math.PI;\n\t\t\thp += (hp < 0) * 2 * Math.PI;\n\t\t}\n\n\t\tlet Lpm50 = Math.pow(Lp - 50, 2);\n\t\tlet T =\n\t\t\t1 -\n\t\t\t0.17 * Math.cos(hp - Math.PI / 6) +\n\t\t\t0.24 * Math.cos(2 * hp) +\n\t\t\t0.32 * Math.cos(3 * hp + Math.PI / 30) -\n\t\t\t0.2 * Math.cos(4 * hp - (63 * Math.PI) / 180);\n\n\t\tlet Sl = 1 + (0.015 * Lpm50) / Math.sqrt(20 + Lpm50);\n\t\tlet Sc = 1 + 0.045 * Cp;\n\t\tlet Sh = 1 + 0.015 * Cp * T;\n\n\t\tlet deltaTheta =\n\t\t\t((30 * Math.PI) / 180) *\n\t\t\tMath.exp(-1 * Math.pow(((180 / Math.PI) * hp - 275) / 25, 2));\n\t\tlet Rc =\n\t\t\t2 *\n\t\t\tMath.sqrt(Math.pow(Cp, 7) / (Math.pow(Cp, 7) + Math.pow(25, 7)));\n\n\t\tlet Rt = -1 * Math.sin(2 * deltaTheta) * Rc;\n\n\t\treturn Math.sqrt(\n\t\t\tMath.pow(dL / (Kl * Sl), 2) +\n\t\t\t\tMath.pow(dC / (Kc * Sc), 2) +\n\t\t\t\tMath.pow(dH / (Kh * Sh), 2) +\n\t\t\t\t(((Rt * dC) / (Kc * Sc)) * dH) / (Kh * Sh)\n\t\t);\n\t};\n};\n\n/*\n\tCMC (l:c) difference formula\n\n\tReferences:\n\t\thttps://en.wikipedia.org/wiki/Color_difference#CMC_l:c_(1984)\n\t\thttp://www.brucelindbloom.com/index.html?Eqn_DeltaE_CMC.html\n */\nconst differenceCmc = (l = 1, c = 1) => {\n\tlet lab = converter('lab65');\n\n\t/*\n\t\tComparte two colors:\n\t\tstd - standard (first) color\n\t\tsmp - sample (second) color\n\t */\n\treturn (std, smp) => {\n\t\t// convert standard color to Lab\n\t\tlet LabStd = lab(std);\n\t\tlet lStd = LabStd.l;\n\t\tlet aStd = LabStd.a;\n\t\tlet bStd = LabStd.b;\n\n\t\t// Obtain hue/chroma\n\t\tlet cStd = Math.sqrt(aStd * aStd + bStd * bStd);\n\t\tlet hStd = Math.atan2(bStd, aStd);\n\t\thStd = hStd + 2 * Math.PI * (hStd < 0);\n\n\t\t// convert sample color to Lab, obtain LCh\n\t\tlet LabSmp = lab(smp);\n\t\tlet lSmp = LabSmp.l;\n\t\tlet aSmp = LabSmp.a;\n\t\tlet bSmp = LabSmp.b;\n\n\t\t// Obtain chroma\n\t\tlet cSmp = Math.sqrt(aSmp * aSmp + bSmp * bSmp);\n\n\t\t// lightness delta squared\n\t\tlet dL2 = Math.pow(lStd - lSmp, 2);\n\n\t\t// chroma delta squared\n\t\tlet dC2 = Math.pow(cStd - cSmp, 2);\n\n\t\t// hue delta squared\n\t\tlet dH2 = Math.pow(aStd - aSmp, 2) + Math.pow(bStd - bSmp, 2) - dC2;\n\n\t\tlet F = Math.sqrt(Math.pow(cStd, 4) / (Math.pow(cStd, 4) + 1900));\n\t\tlet T =\n\t\t\thStd >= (164 / 180) * Math.PI && hStd <= (345 / 180) * Math.PI\n\t\t\t\t? 0.56 + Math.abs(0.2 * Math.cos(hStd + (168 / 180) * Math.PI))\n\t\t\t\t: 0.36 + Math.abs(0.4 * Math.cos(hStd + (35 / 180) * Math.PI));\n\n\t\tlet Sl = lStd < 16 ? 0.511 : (0.040975 * lStd) / (1 + 0.01765 * lStd);\n\t\tlet Sc = (0.0638 * cStd) / (1 + 0.0131 * cStd) + 0.638;\n\t\tlet Sh = Sc * (F * T + 1 - F);\n\n\t\treturn Math.sqrt(\n\t\t\tdL2 / Math.pow(l * Sl, 2) +\n\t\t\t\tdC2 / Math.pow(c * Sc, 2) +\n\t\t\t\tdH2 / Math.pow(Sh, 2)\n\t\t);\n\t};\n};\n\n/*\n\n\tHyAB color difference formula, introduced in:\n\n\t\tAbasi S, Amani Tehran M, Fairchild MD. \n\t\t\"Distance metrics for very large color differences.\"\n\t\tColor Res Appl. 2019; 1–16. \n\t\thttps://doi.org/10.1002/col.22451\n\n\tPDF available at:\n\t\n\t\thttp://markfairchild.org/PDFs/PAP40.pdf\n */\nconst differenceHyab = () => {\n\tlet lab = converter('lab65');\n\treturn (std, smp) => {\n\t\tlet LabStd = lab(std);\n\t\tlet LabSmp = lab(smp);\n\t\tlet dL = LabStd.l - LabSmp.l;\n\t\tlet dA = LabStd.a - LabSmp.a;\n\t\tlet dB = LabStd.b - LabSmp.b;\n\t\treturn Math.abs(dL) + Math.sqrt(dA * dA + dB * dB);\n\t};\n};\n\n/*\n\t\"Measuring perceived color difference using YIQ NTSC\n\ttransmission color space in mobile applications\"\n\t\t\n\t\tby Yuriy Kotsarenko, Fernando Ramos in:\n\t\tProgramación Matemática y Software (2010) \n\n\tAvailable at:\n\t\t\n\t\thttp://www.progmat.uaem.mx:8080/artVol2Num2/Articulo3Vol2Num2.pdf\n */\nconst differenceKotsarenkoRamos = () =>\n\tdifferenceEuclidean('yiq', [0.5053, 0.299, 0.1957]);\n\nexport {\n\tdifferenceHueChroma,\n\tdifferenceHueSaturation,\n\tdifferenceHueNaive,\n\tdifferenceEuclidean,\n\tdifferenceCie76,\n\tdifferenceCie94,\n\tdifferenceCiede2000,\n\tdifferenceCmc,\n\tdifferenceHyab,\n\tdifferenceKotsarenkoRamos\n};\n", "import converter from './converter.js';\nimport { getMode } from './modes.js';\n\nconst averageAngle = val => {\n\t// See: https://en.wikipedia.org/wiki/Mean_of_circular_quantities\n\tlet sum = val.reduce(\n\t\t(sum, val) => {\n\t\t\tif (val !== undefined) {\n\t\t\t\tlet rad = (val * Math.PI) / 180;\n\t\t\t\tsum.sin += Math.sin(rad);\n\t\t\t\tsum.cos += Math.cos(rad);\n\t\t\t}\n\t\t\treturn sum;\n\t\t},\n\t\t{ sin: 0, cos: 0 }\n\t);\n\treturn (Math.atan2(sum.sin, sum.cos) * 180) / Math.PI;\n};\n\nconst averageNumber = val => {\n\tlet a = val.filter(v => v !== undefined);\n\treturn a.length ? a.reduce((sum, v) => sum + v, 0) / a.length : undefined;\n};\n\nconst isfn = o => typeof o === 'function';\n\nfunction average(colors, mode = 'rgb', overrides) {\n\tlet def = getMode(mode);\n\tlet cc = colors.map(converter(mode));\n\treturn def.channels.reduce(\n\t\t(res, ch) => {\n\t\t\tlet arr = cc.map(c => c[ch]).filter(val => val !== undefined);\n\t\t\tif (arr.length) {\n\t\t\t\tlet fn;\n\t\t\t\tif (isfn(overrides)) {\n\t\t\t\t\tfn = overrides;\n\t\t\t\t} else if (overrides && isfn(overrides[ch])) {\n\t\t\t\t\tfn = overrides[ch];\n\t\t\t\t} else if (def.average && isfn(def.average[ch])) {\n\t\t\t\t\tfn = def.average[ch];\n\t\t\t\t} else {\n\t\t\t\t\tfn = averageNumber;\n\t\t\t\t}\n\t\t\t\tres[ch] = fn(arr, ch);\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\t{ mode }\n\t);\n}\n\nexport { average, averageAngle, averageNumber };\n", "/* \n\tDave Green's Cubehelix\n\t----------------------\n\n\tGreen, D. A., 2011, \"A colour scheme for the display of astronomical intensity images\", \n\tBulletin of the Astronomical Society of India, 39, 289. (2011BASI...39..289G at ADS.) \n\n\thttps://www.mrao.cam.ac.uk/%7Edag/CUBEHELIX/\n\thttps://arxiv.org/pdf/1108.5083.pdf\n\n\tAlthough Cubehelix was defined to be a method to obtain a colour scheme,\n\tit actually contains a definition of a colour space, as identified by \n\tMike Bostock and implemented in D3.js.\n\n\tGreen's paper introduces the following terminology:\n\n\t* \ta `lightness` dimension in the interval [0, 1] \n\t\ton which we interpolate to obtain the colour scheme\n\t*\ta `start` colour that is analogous to a Hue in HSL space\n\t*\ta number of `rotations` around the Hue cylinder.\n\t*\ta `hue` parameter which should more appropriately be called `saturation`\n\t\n\tAs such, the original definition of the Cubehelix scheme is actually an\n\tinterpolation between two colors in the Cubehelix space:\n\n\tH: start \t\t\t\tH: start + 360 * rotations\n\tS: hue \t\t\t->\t\tS: hue\n\tL: 0\t\t\t\t\tL: 1\n\n\tWe can therefore extend the interpolation to any two colors in this space,\n\twith a variable Saturation and a Lightness interval other than the fixed 0 -> 1.\n*/\n\nimport { fixupHueShorter } from '../fixup/hue.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport convertRgbToCubehelix from './convertRgbToCubehelix.js';\nimport convertCubehelixToRgb from './convertCubehelixToRgb.js';\nimport { differenceHueSaturation } from '../difference.js';\nimport { averageAngle } from '../average.js';\n\nconst definition = {\n\tmode: 'cubehelix',\n\tchannels: ['h', 's', 'l', 'alpha'],\n\tparse: ['--cubehelix'],\n\tserialize: '--cubehelix',\n\n\tranges: {\n\t\th: [0, 360],\n\t\ts: [0, 4.614],\n\t\tl: [0, 1]\n\t},\n\n\tfromMode: {\n\t\trgb: convertRgbToCubehelix\n\t},\n\n\ttoMode: {\n\t\trgb: convertCubehelixToRgb\n\t},\n\n\tinterpolate: {\n\t\th: {\n\t\t\tuse: interpolatorLinear,\n\t\t\tfixup: fixupHueShorter\n\t\t},\n\t\ts: interpolatorLinear,\n\t\tl: interpolatorLinear,\n\t\talpha: {\n\t\t\tuse: interpolatorLinear,\n\t\t\tfixup: fixupAlpha\n\t\t}\n\t},\n\n\tdifference: {\n\t\th: differenceHueSaturation\n\t},\n\n\taverage: {\n\t\th: averageAngle\n\t}\n};\n\nexport default definition;\n", "import normalizeHue from '../util/normalizeHue.js';\n\n/* \n\tReferences: \n\t\t* https://drafts.csswg.org/css-color/#lab-to-lch\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n*/\nconst convertLabToLch = ({ l, a, b, alpha }, mode = 'lch') => {\n\tlet c = Math.sqrt(a * a + b * b);\n\tlet res = { mode, l, c };\n\tif (c) res.h = normalizeHue((Math.atan2(b, a) * 180) / Math.PI);\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertLabToLch;\n", "/* \n\tReferences: \n\t\t* https://drafts.csswg.org/css-color/#lch-to-lab\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n*/\nconst convertLchToLab = ({ l, c, h, alpha }, mode = 'lab') => {\n\tlet res = {\n\t\tmode,\n\t\tl,\n\t\ta: c ? c * Math.cos((h / 180) * Math.PI) : 0,\n\t\tb: c ? c * Math.sin((h / 180) * Math.PI) : 0\n\t};\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertLchToLab;\n", "export const k = Math.pow(29, 3) / Math.pow(3, 3);\nexport const e = Math.pow(6, 3) / Math.pow(29, 3);\n", "/*\n\tThe XYZ tristimulus values (white point)\n\tof standard illuminants for the CIE 1931 2° \n\tstandard observer.\n\n\tSee: https://en.wikipedia.org/wiki/Standard_illuminant\n */\n\nexport const D50 = {\n\tX: 0.3457 / 0.3585,\n\tY: 1,\n\tZ: (1 - 0.3457 - 0.3585) / 0.3585\n};\n\nexport const D65 = {\n\tX: 0.3127 / 0.329,\n\tY: 1,\n\tZ: (1 - 0.3127 - 0.329) / 0.329\n};\n\nexport const k = Math.pow(29, 3) / Math.pow(3, 3);\nexport const e = Math.pow(6, 3) / Math.pow(29, 3);\n", "import { k, e } from '../xyz65/constants.js';\nimport { D65 } from '../constants.js';\n\nlet fn = v => (Math.pow(v, 3) > e ? Math.pow(v, 3) : (116 * v - 16) / k);\n\nconst convertLab65ToXyz65 = ({ l, a, b, alpha }) => {\n\tlet fy = (l + 16) / 116;\n\tlet fx = a / 500 + fy;\n\tlet fz = fy - b / 200;\n\n\tlet res = {\n\t\tmode: 'xyz65',\n\t\tx: fn(fx) * D65.X,\n\t\ty: fn(fy) * D65.Y,\n\t\tz: fn(fz) * D65.Z\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertLab65ToXyz65;\n", "import convertLab65ToXyz65 from './convertLab65ToXyz65.js';\nimport convertXyz65ToRgb from '../xyz65/convertXyz65ToRgb.js';\n\nconst convertLab65ToRgb = lab => convertXyz65ToRgb(convertLab65ToXyz65(lab));\n\nexport default convertLab65ToRgb;\n", "import { k, e } from '../xyz65/constants.js';\nimport { D65 } from '../constants.js';\n\nconst f = value => (value > e ? Math.cbrt(value) : (k * value + 16) / 116);\n\nconst convertXyz65ToLab65 = ({ x, y, z, alpha }) => {\n\tlet f0 = f(x / D65.X);\n\tlet f1 = f(y / D65.Y);\n\tlet f2 = f(z / D65.Z);\n\n\tlet res = {\n\t\tmode: 'lab65',\n\t\tl: 116 * f1 - 16,\n\t\ta: 500 * (f0 - f1),\n\t\tb: 200 * (f1 - f2)\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertXyz65ToLab65;\n", "import convertRgbToXyz65 from '../xyz65/convertRgbToXyz65.js';\nimport convertXyz65ToLab65 from './convertXyz65ToLab65.js';\n\nconst convertRgbToLab65 = rgb => {\n\tlet res = convertXyz65ToLab65(convertRgbToXyz65(rgb));\n\n\t// Fixes achromatic RGB colors having a _slight_ chroma due to floating-point errors\n\t// and approximated computations in sRGB <-> CIELab.\n\t// See: https://github.com/d3/d3-color/pull/46\n\tif (rgb.r === rgb.b && rgb.b === rgb.g) {\n\t\tres.a = res.b = 0;\n\t}\n\treturn res;\n};\n\nexport default convertRgbToLab65;\n", "export const kE = 1;\nexport const kCH = 1;\nexport const θ = (26 / 180) * Math.PI;\nexport const cosθ = Math.cos(θ);\nexport const sinθ = Math.sin(θ);\nexport const factor = 100 / Math.log(139 / 100); // ~ 303.67\n", "import { kCH, kE, sinθ, cosθ, θ, factor } from './constants.js';\n\n/*\n\tConvert DIN99o LCh to CIELab D65\n\t--------------------------------\n */\n\nconst convertDlchToLab65 = ({ l, c, h, alpha }) => {\n\tlet res = {\n\t\tmode: 'lab65',\n\t\tl: (Math.exp((l * kE) / factor) - 1) / 0.0039\n\t};\n\n\tif (h === undefined) {\n\t\tres.a = res.b = 0;\n\t} else {\n\t\tlet G = (Math.exp(0.0435 * c * kCH * kE) - 1) / 0.075;\n\t\tlet e = G * Math.cos((h / 180) * Math.PI - θ);\n\t\tlet f = G * Math.sin((h / 180) * Math.PI - θ);\n\t\tres.a = e * cosθ - (f / 0.83) * sinθ;\n\t\tres.b = e * sinθ + (f / 0.83) * cosθ;\n\t}\n\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertDlchToLab65;\n", "import { kCH, kE, sinθ, cosθ, θ, factor } from './constants.js';\nimport normalizeHue from '../util/normalizeHue.js';\n\n/*\n\tConvert CIELab D65 to DIN99o LCh\n\t================================\n */\n\nconst convertLab65ToDlch = ({ l, a, b, alpha }) => {\n\tlet e = a * cosθ + b * sinθ;\n\tlet f = 0.83 * (b * cosθ - a * sinθ);\n\tlet G = Math.sqrt(e * e + f * f);\n\tlet res = {\n\t\tmode: 'dlch',\n\t\tl: (factor / kE) * Math.log(1 + 0.0039 * l),\n\t\tc: Math.log(1 + 0.075 * G) / (0.0435 * kCH * kE)\n\t};\n\n\tif (res.c) {\n\t\tres.h = normalizeHue(((Math.atan2(f, e) + θ) / Math.PI) * 180);\n\t}\n\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertLab65ToDlch;\n", "import convertLabToLch from '../lch/convertLabToLch.js';\nimport convertLchToLab from '../lch/convertLchToLab.js';\nimport convertLab65ToRgb from '../lab65/convertLab65ToRgb.js';\nimport convertRgbToLab65 from '../lab65/convertRgbToLab65.js';\nimport convertDlchToLab65 from '../dlch/convertDlchToLab65.js';\nimport convertLab65ToDlch from '../dlch/convertLab65ToDlch.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\n\nconst convertDlabToLab65 = c => convertDlchToLab65(convertLabToLch(c, 'dlch'));\nconst convertLab65ToDlab = c => convertLchToLab(convertLab65ToDlch(c), 'dlab');\n\nconst definition = {\n\tmode: 'dlab',\n\n\tparse: ['--din99o-lab'],\n\tserialize: '--din99o-lab',\n\n\ttoMode: {\n\t\tlab65: convertDlabToLab65,\n\t\trgb: c => convertLab65ToRgb(convertDlabToLab65(c))\n\t},\n\n\tfromMode: {\n\t\tlab65: convertLab65ToDlab,\n\t\trgb: c => convertLab65ToDlab(convertRgbToLab65(c))\n\t},\n\n\tchannels: ['l', 'a', 'b', 'alpha'],\n\n\tranges: {\n\t\tl: [0, 100],\n\t\ta: [-40.09, 45.501],\n\t\tb: [-40.469, 44.344]\n\t},\n\n\tinterpolate: {\n\t\tl: interpolatorLinear,\n\t\ta: interpolatorLinear,\n\t\tb: interpolatorLinear,\n\t\talpha: {\n\t\t\tuse: interpolatorLinear,\n\t\t\tfixup: fixupAlpha\n\t\t}\n\t}\n};\n\nexport default definition;\n", "import convertLabToLch from '../lch/convertLabToLch.js';\nimport convertLchToLab from '../lch/convertLchToLab.js';\nimport convertDlchToLab65 from './convertDlchToLab65.js';\nimport convertLab65ToDlch from './convertLab65ToDlch.js';\nimport convertLab65ToRgb from '../lab65/convertLab65ToRgb.js';\nimport convertRgbToLab65 from '../lab65/convertRgbToLab65.js';\n\nimport { fixupHueShorter } from '../fixup/hue.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { differenceHueChroma } from '../difference.js';\nimport { averageAngle } from '../average.js';\n\nconst definition = {\n\tmode: 'dlch',\n\n\tparse: ['--din99o-lch'],\n\tserialize: '--din99o-lch',\n\n\ttoMode: {\n\t\tlab65: convertDlchToLab65,\n\t\tdlab: c => convertLchToLab(c, 'dlab'),\n\t\trgb: c => convertLab65ToRgb(convertDlchToLab65(c))\n\t},\n\n\tfromMode: {\n\t\tlab65: convertLab65ToDlch,\n\t\tdlab: c => convertLabToLch(c, 'dlch'),\n\t\trgb: c => convertLab65ToDlch(convertRgbToLab65(c))\n\t},\n\n\tchannels: ['l', 'c', 'h', 'alpha'],\n\n\tranges: {\n\t\tl: [0, 100],\n\t\tc: [0, 51.484],\n\t\th: [0, 360]\n\t},\n\n\tinterpolate: {\n\t\tl: interpolatorLinear,\n\t\tc: interpolatorLinear,\n\t\th: {\n\t\t\tuse: interpolatorLinear,\n\t\t\tfixup: fixupHueShorter\n\t\t},\n\t\talpha: {\n\t\t\tuse: interpolatorLinear,\n\t\t\tfixup: fixupAlpha\n\t\t}\n\t},\n\n\tdifference: {\n\t\th: differenceHueChroma\n\t},\n\n\taverage: {\n\t\th: averageAngle\n\t}\n};\n\nexport default definition;\n", "import normalizeHue from '../util/normalizeHue.js';\n\n// Based on: https://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n\nexport default function convertHsiToRgb({ h, s, i, alpha }) {\n\th = normalizeHue(h);\n\tlet f = Math.abs(((h / 60) % 2) - 1);\n\tlet res;\n\tswitch (Math.floor(h / 60)) {\n\t\tcase 0:\n\t\t\tres = {\n\t\t\t\tr: i * (1 + s * (3 / (2 - f) - 1)),\n\t\t\t\tg: i * (1 + s * ((3 * (1 - f)) / (2 - f) - 1)),\n\t\t\t\tb: i * (1 - s)\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tres = {\n\t\t\t\tr: i * (1 + s * ((3 * (1 - f)) / (2 - f) - 1)),\n\t\t\t\tg: i * (1 + s * (3 / (2 - f) - 1)),\n\t\t\t\tb: i * (1 - s)\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tres = {\n\t\t\t\tr: i * (1 - s),\n\t\t\t\tg: i * (1 + s * (3 / (2 - f) - 1)),\n\t\t\t\tb: i * (1 + s * ((3 * (1 - f)) / (2 - f) - 1))\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tres = {\n\t\t\t\tr: i * (1 - s),\n\t\t\t\tg: i * (1 + s * ((3 * (1 - f)) / (2 - f) - 1)),\n\t\t\t\tb: i * (1 + s * (3 / (2 - f) - 1))\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tres = {\n\t\t\t\tr: i * (1 + s * ((3 * (1 - f)) / (2 - f) - 1)),\n\t\t\t\tg: i * (1 - s),\n\t\t\t\tb: i * (1 + s * (3 / (2 - f) - 1))\n\t\t\t};\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tres = {\n\t\t\t\tr: i * (1 + s * (3 / (2 - f) - 1)),\n\t\t\t\tg: i * (1 - s),\n\t\t\t\tb: i * (1 + s * ((3 * (1 - f)) / (2 - f) - 1))\n\t\t\t};\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tres = { r: i * (1 - s), g: i * (1 - s), b: i * (1 - s) };\n\t}\n\n\tres.mode = 'rgb';\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n}\n", "// Based on: https://en.wikipedia.org/wiki/HSL_and_HSV#Formal_derivation\n\nexport default function convertRgbToHsi({ r, g, b, alpha }) {\n\tlet M = Math.max(r, g, b),\n\t\tm = Math.min(r, g, b);\n\tlet res = {\n\t\tmode: 'hsi',\n\t\ts: r + g + b === 0 ? 0 : 1 - (3 * m) / (r + g + b),\n\t\ti: (r + g + b) / 3\n\t};\n\tif (M - m !== 0)\n\t\tres.h =\n\t\t\t(M === r\n\t\t\t\t? (g - b) / (M - m) + (g < b) * 6\n\t\t\t\t: M === g\n\t\t\t\t? (b - r) / (M - m) + 2\n\t\t\t\t: (r - g) / (M - m) + 4) * 60;\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n}\n", "import convertHsiToRgb from './convertHsiToRgb.js';\nimport convertRgbToHsi from './convertRgbToHsi.js';\nimport { fixupHueShorter } from '../fixup/hue.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { differenceHueSaturation } from '../difference.js';\nimport { averageAngle } from '../average.js';\n\nconst definition = {\n\tmode: 'hsi',\n\n\ttoMode: {\n\t\trgb: convertHsiToRgb\n\t},\n\n\tparse: ['--hsi'],\n\tserialize: '--hsi',\n\n\tfromMode: {\n\t\trgb: convertRgbToHsi\n\t},\n\n\tchannels: ['h', 's', 'i', 'alpha'],\n\n\tranges: {\n\t\th: [0, 360]\n\t},\n\n\tgamut: 'rgb',\n\n\tinterpolate: {\n\t\th: { use: interpolatorLinear, fixup: fixupHueShorter },\n\t\ts: interpolatorLinear,\n\t\ti: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t},\n\n\tdifference: {\n\t\th: differenceHueSaturation\n\t},\n\n\taverage: {\n\t\th: averageAngle\n\t}\n};\n\nexport default definition;\n", "import normalizeHue from '../util/normalizeHue.js';\n// Based on: https://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n\nexport default function convertHslToRgb({ h, s, l, alpha }) {\n\th = normalizeHue(h);\n\tlet m1 = l + s * (l < 0.5 ? l : 1 - l);\n\tlet m2 = m1 - (m1 - l) * 2 * Math.abs(((h / 60) % 2) - 1);\n\tlet res;\n\tswitch (Math.floor(h / 60)) {\n\t\tcase 0:\n\t\t\tres = { r: m1, g: m2, b: 2 * l - m1 };\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tres = { r: m2, g: m1, b: 2 * l - m1 };\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tres = { r: 2 * l - m1, g: m1, b: m2 };\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tres = { r: 2 * l - m1, g: m2, b: m1 };\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tres = { r: m2, g: 2 * l - m1, b: m1 };\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tres = { r: m1, g: 2 * l - m1, b: m2 };\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tres = { r: 2 * l - m1, g: 2 * l - m1, b: 2 * l - m1 };\n\t}\n\tres.mode = 'rgb';\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n}\n", "// Based on: https://en.wikipedia.org/wiki/HSL_and_HSV#Formal_derivation\n\nexport default function convertRgbToHsl({ r, g, b, alpha }) {\n\tlet M = Math.max(r, g, b),\n\t\tm = Math.min(r, g, b);\n\tlet res = {\n\t\tmode: 'hsl',\n\t\ts: M === m ? 0 : (M - m) / (1 - Math.abs(M + m - 1)),\n\t\tl: 0.5 * (M + m)\n\t};\n\tif (M - m !== 0)\n\t\tres.h =\n\t\t\t(M === r\n\t\t\t\t? (g - b) / (M - m) + (g < b) * 6\n\t\t\t\t: M === g\n\t\t\t\t? (b - r) / (M - m) + 2\n\t\t\t\t: (r - g) / (M - m) + 4) * 60;\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n}\n", "const hueToDeg = (val, unit) => {\n\tswitch (unit) {\n\t\tcase 'deg':\n\t\t\treturn +val;\n\t\tcase 'rad':\n\t\t\treturn (val / Math.PI) * 180;\n\t\tcase 'grad':\n\t\t\treturn (val / 10) * 9;\n\t\tcase 'turn':\n\t\t\treturn val * 360;\n\t}\n};\n\nexport default hueToDeg;\n", "import hueToDeg from '../util/hue.js';\nimport { hue, per, num_per, c } from '../util/regex.js';\n\n/*\n\thsl() regular expressions for legacy format\n\tReference: https://drafts.csswg.org/css-color/#the-hsl-notation\n */\nconst hsl_old = new RegExp(\n\t`^hsla?\\\\(\\\\s*${hue}${c}${per}${c}${per}\\\\s*(?:,\\\\s*${num_per}\\\\s*)?\\\\)$`\n);\n\nconst parseHslLegacy = color => {\n\tlet match = color.match(hsl_old);\n\tif (!match) return;\n\tlet res = { mode: 'hsl' };\n\n\tif (match[3] !== undefined) {\n\t\tres.h = +match[3];\n\t} else if (match[1] !== undefined && match[2] !== undefined) {\n\t\tres.h = hueToDeg(match[1], match[2]);\n\t}\n\n\tif (match[4] !== undefined) {\n\t\tres.s = Math.min(Math.max(0, match[4] / 100), 1);\n\t}\n\n\tif (match[5] !== undefined) {\n\t\tres.l = Math.min(Math.max(0, match[5] / 100), 1);\n\t}\n\n\tif (match[6] !== undefined) {\n\t\tres.alpha = match[6] / 100;\n\t} else if (match[7] !== undefined) {\n\t\tres.alpha = +match[7];\n\t}\n\treturn res;\n};\n\nexport default parseHslLegacy;\n", "import { Tok } from '../parse.js';\n\nfunction parseHsl(color, parsed) {\n\tif (!parsed || (parsed[0] !== 'hsl' && parsed[0] !== 'hsla')) {\n\t\treturn undefined;\n\t}\n\tconst res = { mode: 'hsl' };\n\tconst [, h, s, l, alpha] = parsed;\n\n\tif (h.type !== Tok.None) {\n\t\tif (h.type === Tok.Percentage) {\n\t\t\treturn undefined;\n\t\t}\n\t\tres.h = h.value;\n\t}\n\n\tif (s.type !== Tok.None) {\n\t\tif (s.type === Tok.Hue) {\n\t\t\treturn undefined;\n\t\t}\n\t\tres.s = s.type === Tok.Number ? s.value : s.value / 100;\n\t}\n\n\tif (l.type !== Tok.None) {\n\t\tif (l.type === Tok.Hue) {\n\t\t\treturn undefined;\n\t\t}\n\t\tres.l = l.type === Tok.Number ? l.value : l.value / 100;\n\t}\n\n\tif (alpha.type !== Tok.None) {\n\t\tres.alpha = alpha.type === Tok.Number ? alpha.value : alpha.value / 100;\n\t}\n\n\treturn res;\n}\n\nexport default parseHsl;\n", "import convertHslToRgb from './convertHslToRgb.js';\nimport convertRgbToHsl from './convertRgbToHsl.js';\nimport parseHslLegacy from './parseHslLegacy.js';\nimport parseHsl from './parseHsl.js';\nimport { fixupHueShorter } from '../fixup/hue.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { differenceHueSaturation } from '../difference.js';\nimport { averageAngle } from '../average.js';\n\nconst definition = {\n\tmode: 'hsl',\n\n\ttoMode: {\n\t\trgb: convertHslToRgb\n\t},\n\n\tfromMode: {\n\t\trgb: convertRgbToHsl\n\t},\n\n\tchannels: ['h', 's', 'l', 'alpha'],\n\n\tranges: {\n\t\th: [0, 360]\n\t},\n\n\tgamut: 'rgb',\n\n\tparse: [parseHsl, parseHslLegacy],\n\tserialize: c =>\n\t\t`hsl(${c.h || 0} ${c.s !== undefined ? c.s * 100 + '%' : 'none'} ${\n\t\t\tc.l !== undefined ? c.l * 100 + '%' : 'none'\n\t\t}${c.alpha < 1 ? ` / ${c.alpha}` : ''})`,\n\n\tinterpolate: {\n\t\th: { use: interpolatorLinear, fixup: fixupHueShorter },\n\t\ts: interpolatorLinear,\n\t\tl: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t},\n\n\tdifference: {\n\t\th: differenceHueSaturation\n\t},\n\n\taverage: {\n\t\th: averageAngle\n\t}\n};\n\nexport default definition;\n", "import normalizeHue from '../util/normalizeHue.js';\n\n// Based on: https://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n\nexport default function convertHsvToRgb({ h, s, v, alpha }) {\n\th = normalizeHue(h);\n\tlet f = Math.abs(((h / 60) % 2) - 1);\n\tlet res;\n\tswitch (Math.floor(h / 60)) {\n\t\tcase 0:\n\t\t\tres = { r: v, g: v * (1 - s * f), b: v * (1 - s) };\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tres = { r: v * (1 - s * f), g: v, b: v * (1 - s) };\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tres = { r: v * (1 - s), g: v, b: v * (1 - s * f) };\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tres = { r: v * (1 - s), g: v * (1 - s * f), b: v };\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tres = { r: v * (1 - s * f), g: v * (1 - s), b: v };\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tres = { r: v, g: v * (1 - s), b: v * (1 - s * f) };\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tres = { r: v * (1 - s), g: v * (1 - s), b: v * (1 - s) };\n\t}\n\tres.mode = 'rgb';\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n}\n", "// Based on: https://en.wikipedia.org/wiki/HSL_and_HSV#Formal_derivation\n\nexport default function convertRgbToHsv({ r, g, b, alpha }) {\n\tlet M = Math.max(r, g, b),\n\t\tm = Math.min(r, g, b);\n\tlet res = {\n\t\tmode: 'hsv',\n\t\ts: M === 0 ? 0 : 1 - m / M,\n\t\tv: M\n\t};\n\tif (M - m !== 0)\n\t\tres.h =\n\t\t\t(M === r\n\t\t\t\t? (g - b) / (M - m) + (g < b) * 6\n\t\t\t\t: M === g\n\t\t\t\t? (b - r) / (M - m) + 2\n\t\t\t\t: (r - g) / (M - m) + 4) * 60;\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n}\n", "import convertHsvToRgb from './convertHsvToRgb.js';\nimport convertRgbToHsv from './convertRgbToHsv.js';\nimport { fixupHueShorter } from '../fixup/hue.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { differenceHueSaturation } from '../difference.js';\nimport { averageAngle } from '../average.js';\n\nconst definition = {\n\tmode: 'hsv',\n\n\ttoMode: {\n\t\trgb: convertHsvToRgb\n\t},\n\n\tparse: ['--hsv'],\n\tserialize: '--hsv',\n\n\tfromMode: {\n\t\trgb: convertRgbToHsv\n\t},\n\n\tchannels: ['h', 's', 'v', 'alpha'],\n\n\tranges: {\n\t\th: [0, 360]\n\t},\n\n\tgamut: 'rgb',\n\n\tinterpolate: {\n\t\th: { use: interpolatorLinear, fixup: fixupHueShorter },\n\t\ts: interpolatorLinear,\n\t\tv: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t},\n\n\tdifference: {\n\t\th: differenceHueSaturation\n\t},\n\n\taverage: {\n\t\th: averageAngle\n\t}\n};\n\nexport default definition;\n", "/*\n\tHWB to RGB converter\n\t--------------------\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#hwb-to-rgb\n\t\t* https://en.wikipedia.org/wiki/HWB_color_model\n\t\t* http://alvyray.com/Papers/CG/HWB_JGTv208.pdf\n */\n\nimport convertHsvToRgb from '../hsv/convertHsvToRgb.js';\n\nexport default function convertHwbToRgb({ h, w, b, alpha }) {\n\t// normalize w + b to 1\n\tif (w + b > 1) {\n\t\tlet s = w + b;\n\t\tw /= s;\n\t\tb /= s;\n\t}\n\treturn convertHsvToRgb({\n\t\th: h,\n\t\ts: b === 1 ? 1 : 1 - w / (1 - b),\n\t\tv: 1 - b,\n\t\talpha: alpha\n\t});\n}\n", "/*\n\tRGB to HWB converter\n\t--------------------\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#hwb-to-rgb\n\t\t* https://en.wikipedia.org/wiki/HWB_color_model\n\t\t* http://alvyray.com/Papers/CG/HWB_JGTv208.pdf\n */\n\nimport convertRgbToHsv from '../hsv/convertRgbToHsv.js';\n\nexport default function convertRgbToHwb(rgba) {\n\tlet hsv = convertRgbToHsv(rgba);\n\tif (hsv === undefined) return undefined;\n\tlet res = {\n\t\tmode: 'hwb',\n\t\tw: (1 - hsv.s) * hsv.v,\n\t\tb: 1 - hsv.v\n\t};\n\tif (hsv.h !== undefined) res.h = hsv.h;\n\tif (hsv.alpha !== undefined) res.alpha = hsv.alpha;\n\treturn res;\n}\n", "import { Tok } from '../parse.js';\n\nfunction ParseHwb(color, parsed) {\n\tif (!parsed || parsed[0] !== 'hwb') {\n\t\treturn undefined;\n\t}\n\tconst res = { mode: 'hwb' };\n\tconst [, h, w, b, alpha] = parsed;\n\n\tif (h.type !== Tok.None) {\n\t\tif (h.type === Tok.Percentage) {\n\t\t\treturn undefined;\n\t\t}\n\t\tres.h = h.value;\n\t}\n\n\tif (w.type !== Tok.None) {\n\t\tif (w.type === Tok.Hue) {\n\t\t\treturn undefined;\n\t\t}\n\t\tres.w = w.type === Tok.Number ? w.value : w.value / 100;\n\t}\n\n\tif (b.type !== Tok.None) {\n\t\tif (b.type === Tok.Hue) {\n\t\t\treturn undefined;\n\t\t}\n\t\tres.b = b.type === Tok.Number ? b.value : b.value / 100;\n\t}\n\n\tif (alpha.type !== Tok.None) {\n\t\tres.alpha = alpha.type === Tok.Number ? alpha.value : alpha.value / 100;\n\t}\n\n\treturn res;\n}\n\nexport default ParseHwb;\n", "import convertHwbToRgb from './convertHwbToRgb.js';\nimport convertRgbToHwb from './convertRgbToHwb.js';\nimport parseHwb from './parseHwb.js';\nimport { fixupHueShorter } from '../fixup/hue.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { differenceHueNaive } from '../difference.js';\nimport { averageAngle } from '../average.js';\n\nconst definition = {\n\tmode: 'hwb',\n\n\ttoMode: {\n\t\trgb: convertHwbToRgb\n\t},\n\n\tfromMode: {\n\t\trgb: convertRgbToHwb\n\t},\n\n\tchannels: ['h', 'w', 'b', 'alpha'],\n\n\tranges: {\n\t\th: [0, 360]\n\t},\n\n\tgamut: 'rgb',\n\n\tparse: [parseHwb],\n\tserialize: c =>\n\t\t`hwb(${c.h || 0} ${c.w * 100}% ${c.b * 100}%${\n\t\t\tc.alpha < 1 ? ` / ${c.alpha}` : ''\n\t\t})`,\n\n\tinterpolate: {\n\t\th: { use: interpolatorLinear, fixup: fixupHueShorter },\n\t\tw: interpolatorLinear,\n\t\tb: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t},\n\n\tdifference: {\n\t\th: differenceHueNaive\n\t},\n\n\taverage: {\n\t\th: averageAngle\n\t}\n};\n\nexport default definition;\n", "const n = 0.1593017578125; // = 2610 / Math.pow(2, 14);\nconst p = 134.03437499999998; // = 1.7 * 2523 / Math.pow(2, 5);\nconst c1 = 0.8359375; // = 3424 / Math.pow(2, 12);\nconst c2 = 18.8515625; // = 2413 / Math.pow(2, 7);\nconst c3 = 18.6875; // = 2392 / Math.pow(2, 7);\nconst d0 = 1.6295499532821566e-11;\n\n/* `v` may be negative, in which case return 0 instead of NaN */\nconst pq = v => {\n\tlet vn = Math.pow(v / 10000, n);\n\treturn Math.pow((c1 + c2 * vn) / (1 + c3 * vn), p) || 0;\n};\n\n// Convert to Absolute XYZ\nconst abs = v => Math.max(v * 203, 0);\n\nconst convertXyz65ToJab = ({ x, y, z, alpha }) => {\n\tx = abs(x);\n\ty = abs(y);\n\tz = abs(z);\n\n\tlet xp = 1.15 * x - 0.15 * z;\n\tlet yp = 0.66 * y + 0.34 * x;\n\n\tlet l = pq(0.41478972 * xp + 0.579999 * yp + 0.014648 * z);\n\tlet m = pq(-0.20151 * xp + 1.120649 * yp + 0.0531008 * z);\n\tlet s = pq(-0.0166008 * xp + 0.2648 * yp + 0.6684799 * z);\n\n\tlet i = (l + m) / 2;\n\n\tlet res = {\n\t\tmode: 'jab',\n\t\tj: (0.44 * i) / (1 - 0.56 * i) - d0,\n\t\ta: 3.524 * l - 4.066708 * m + 0.542708 * s,\n\t\tb: 0.199076 * l + 1.096799 * m - 1.295875 * s\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertXyz65ToJab;\n", "const n = 0.1593017578125; // = 2610 / Math.pow(2, 14);\nconst p = 134.03437499999998; // = 1.7 * 2523 / Math.pow(2, 5);\nconst c1 = 0.8359375; // = 3424 / Math.pow(2, 12);\nconst c2 = 18.8515625; // = 2413 / Math.pow(2, 7);\nconst c3 = 18.6875; // = 2392 / Math.pow(2, 7);\nconst d0 = 1.6295499532821566e-11;\n\n/* `v` may be negative, in which case return 0 instead of NaN */\nconst pq_inv = v => {\n\tlet vp = Math.pow(v, 1 / p);\n\treturn 10000 * Math.pow((c1 - vp) / (c3 * vp - c2), 1 / n) || 0;\n};\n\nconst rel = v => v / 203;\n\nconst convertJabToXyz65 = ({ j, a, b, alpha }) => {\n\tlet i = (j + d0) / (0.44 + 0.56 * (j + d0));\n\n\tlet l = pq_inv(i + 0.13860504 * a + 0.058047316 * b);\n\tlet m = pq_inv(i - 0.13860504 * a - 0.058047316 * b);\n\tlet s = pq_inv(i - 0.096019242 * a - 0.8118919 * b);\n\n\tlet res = {\n\t\tmode: 'xyz65',\n\t\tx: rel(\n\t\t\t1.661373024652174 * l -\n\t\t\t\t0.914523081304348 * m +\n\t\t\t\t0.23136208173913045 * s\n\t\t),\n\t\ty: rel(\n\t\t\t-0.3250758611844533 * l +\n\t\t\t\t1.571847026732543 * m -\n\t\t\t\t0.21825383453227928 * s\n\t\t),\n\t\tz: rel(-0.090982811 * l - 0.31272829 * m + 1.5227666 * s)\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertJabToXyz65;\n", "/*\n\tConvert sRGB to JzAzBz.\n\n\tFor achromatic sRGB colors, adjust the equivalent JzAzBz color\n\tto be achromatic as well, insteading of having a very slight chroma.\n */\n\nimport convertXyz65ToJab from './convertXyz65ToJab.js';\nimport convertRgbToXyz65 from '../xyz65/convertRgbToXyz65.js';\n\nconst convertRgbToJab = rgb => {\n\tlet res = convertXyz65ToJab(convertRgbToXyz65(rgb));\n\tif (rgb.r === rgb.b && rgb.b === rgb.g) {\n\t\tres.a = res.b = 0;\n\t}\n\treturn res;\n};\n\nexport default convertRgbToJab;\n", "import convertXyz65ToRgb from '../xyz65/convertXyz65ToRgb.js';\nimport convertJabToXyz65 from './convertJabToXyz65.js';\n\nconst convertJabToRgb = color => convertXyz65ToRgb(convertJabToXyz65(color));\n\nexport default convertJabToRgb;\n", "/*\n\tThe JzAzBz color space.\n\n\tBased on:\n\n\tMuhammad Safdar, Guihua Cui, Youn Jin Kim, and Ming Ronnier Luo, \n\t\"Perceptually uniform color space for image signals \n\tincluding high dynamic range and wide gamut,\" \n\tOpt. Express 25, 15131-15151 (2017) \n\n\thttps://doi.org/10.1364/OE.25.015131\n */\n\nimport convertXyz65ToJab from './convertXyz65ToJab.js';\nimport convertJabToXyz65 from './convertJabToXyz65.js';\nimport convertRgbToJab from './convertRgbToJab.js';\nimport convertJabToRgb from './convertJabToRgb.js';\n\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\n\nconst definition = {\n\tmode: 'jab',\n\tchannels: ['j', 'a', 'b', 'alpha'],\n\n\tparse: ['--jzazbz'],\n\tserialize: '--jzazbz',\n\n\tfromMode: {\n\t\trgb: convertRgbToJab,\n\t\txyz65: convertXyz65ToJab\n\t},\n\n\ttoMode: {\n\t\trgb: convertJabToRgb,\n\t\txyz65: convertJabToXyz65\n\t},\n\n\tranges: {\n\t\tj: [0, 0.222],\n\t\ta: [-0.109, 0.129],\n\t\tb: [-0.185, 0.134]\n\t},\n\n\tinterpolate: {\n\t\tj: interpolatorLinear,\n\t\ta: interpolatorLinear,\n\t\tb: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t}\n};\n\nexport default definition;\n", "import normalizeHue from '../util/normalizeHue.js';\n\nconst convertJabToJch = ({ j, a, b, alpha }) => {\n\tlet c = Math.sqrt(a * a + b * b);\n\tlet res = {\n\t\tmode: 'jch',\n\t\tj,\n\t\tc\n\t};\n\tif (c) {\n\t\tres.h = normalizeHue((Math.atan2(b, a) * 180) / Math.PI);\n\t}\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertJabToJch;\n", "const convertJchToJab = ({ j, c, h, alpha }) => {\n\tlet res = {\n\t\tmode: 'jab',\n\t\tj,\n\t\ta: c ? c * Math.cos((h / 180) * Math.PI) : 0,\n\t\tb: c ? c * Math.sin((h / 180) * Math.PI) : 0\n\t};\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertJchToJab;\n", "import convertJabToJch from './convertJabToJch.js';\nimport convertJchToJab from './convertJchToJab.js';\nimport convertJabToRgb from '../jab/convertJabToRgb.js';\nimport convertRgbToJab from '../jab/convertRgbToJab.js';\n\nimport { fixupHueShorter } from '../fixup/hue.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { differenceHueChroma } from '../difference.js';\nimport { averageAngle } from '../average.js';\n\nconst definition = {\n\tmode: 'jch',\n\n\tparse: ['--jzczhz'],\n\tserialize: '--jzczhz',\n\n\ttoMode: {\n\t\tjab: convertJchToJab,\n\t\trgb: c => convertJabToRgb(convertJchToJab(c))\n\t},\n\n\tfromMode: {\n\t\trgb: c => convertJabToJch(convertRgbToJab(c)),\n\t\tjab: convertJabToJch\n\t},\n\n\tchannels: ['j', 'c', 'h', 'alpha'],\n\n\tranges: {\n\t\tj: [0, 0.221],\n\t\tc: [0, 0.19],\n\t\th: [0, 360]\n\t},\n\n\tinterpolate: {\n\t\th: { use: interpolatorLinear, fixup: fixupHueShorter },\n\t\tc: interpolatorLinear,\n\t\tj: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t},\n\n\tdifference: {\n\t\th: differenceHueChroma\n\t},\n\n\taverage: {\n\t\th: averageAngle\n\t}\n};\n\nexport default definition;\n", "export const k = Math.pow(29, 3) / Math.pow(3, 3);\nexport const e = Math.pow(6, 3) / Math.pow(29, 3);\n", "import { k, e } from '../xyz50/constants.js';\nimport { D50 } from '../constants.js';\n\nlet fn = v => (Math.pow(v, 3) > e ? Math.pow(v, 3) : (116 * v - 16) / k);\n\nconst convertLabToXyz50 = ({ l, a, b, alpha }) => {\n\tlet fy = (l + 16) / 116;\n\tlet fx = a / 500 + fy;\n\tlet fz = fy - b / 200;\n\n\tlet res = {\n\t\tmode: 'xyz50',\n\t\tx: fn(fx) * D50.X,\n\t\ty: fn(fy) * D50.Y,\n\t\tz: fn(fz) * D50.Z\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertLabToXyz50;\n", "/*\n\tCIE XYZ D50 values to sRGB.\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n*/\n\nimport convertLrgbToRgb from '../lrgb/convertLrgbToRgb.js';\n\nconst convertXyz50ToRgb = ({ x, y, z, alpha }) => {\n\tlet res = convertLrgbToRgb({\n\t\tr:\n\t\t\tx * 3.1341359569958707 -\n\t\t\ty * 1.6173863321612538 -\n\t\t\t0.4906619460083532 * z,\n\t\tg:\n\t\t\tx * -0.978795502912089 +\n\t\t\ty * 1.916254567259524 +\n\t\t\t0.03344273116131949 * z,\n\t\tb:\n\t\t\tx * 0.07195537988411677 -\n\t\t\ty * 0.2289768264158322 +\n\t\t\t1.405386058324125 * z\n\t});\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertXyz50ToRgb;\n", "import convertLabToXyz50 from './convertLabToXyz50.js';\nimport convertXyz50ToRgb from '../xyz50/convertXyz50ToRgb.js';\n\nconst convertLabToRgb = lab => convertXyz50ToRgb(convertLabToXyz50(lab));\n\nexport default convertLabToRgb;\n", "/*\n\tConvert sRGB values to CIE XYZ D50\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\t\n*/\n\nimport convertRgbToLrgb from '../lrgb/convertRgbToLrgb.js';\n\nconst convertRgbToXyz50 = rgb => {\n\tlet { r, g, b, alpha } = convertRgbToLrgb(rgb);\n\tlet res = {\n\t\tmode: 'xyz50',\n\t\tx:\n\t\t\t0.436065742824811 * r +\n\t\t\t0.3851514688337912 * g +\n\t\t\t0.14307845442264197 * b,\n\t\ty:\n\t\t\t0.22249319175623702 * r +\n\t\t\t0.7168870538238823 * g +\n\t\t\t0.06061979053616537 * b,\n\t\tz:\n\t\t\t0.013923904500943465 * r +\n\t\t\t0.09708128566574634 * g +\n\t\t\t0.7140993584005155 * b\n\t};\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertRgbToXyz50;\n", "import { k, e } from '../xyz50/constants.js';\nimport { D50 } from '../constants.js';\n\nconst f = value => (value > e ? Math.cbrt(value) : (k * value + 16) / 116);\n\nconst convertXyz50ToLab = ({ x, y, z, alpha }) => {\n\tlet f0 = f(x / D50.X);\n\tlet f1 = f(y / D50.Y);\n\tlet f2 = f(z / D50.Z);\n\n\tlet res = {\n\t\tmode: 'lab',\n\t\tl: 116 * f1 - 16,\n\t\ta: 500 * (f0 - f1),\n\t\tb: 200 * (f1 - f2)\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertXyz50ToLab;\n", "import convertRgbToXyz50 from '../xyz50/convertRgbToXyz50.js';\nimport convertXyz50ToLab from './convertXyz50ToLab.js';\n\nconst convertRgbToLab = rgb => {\n\tlet res = convertXyz50ToLab(convertRgbToXyz50(rgb));\n\n\t// Fixes achromatic RGB colors having a _slight_ chroma due to floating-point errors\n\t// and approximated computations in sRGB <-> CIELab.\n\t// See: https://github.com/d3/d3-color/pull/46\n\tif (rgb.r === rgb.b && rgb.b === rgb.g) {\n\t\tres.a = res.b = 0;\n\t}\n\treturn res;\n};\n\nexport default convertRgbToLab;\n", "import { Tok } from '../parse.js';\n\nfunction parseLab(color, parsed) {\n\tif (!parsed || parsed[0] !== 'lab') {\n\t\treturn undefined;\n\t}\n\tconst res = { mode: 'lab' };\n\tconst [, l, a, b, alpha] = parsed;\n\tif (l.type === Tok.Hue || a.type === Tok.Hue || b.type === Tok.Hue) {\n\t\treturn undefined;\n\t}\n\tif (l.type !== Tok.None) {\n\t\tres.l = l.value;\n\t}\n\tif (a.type !== Tok.None) {\n\t\tres.a = a.type === Tok.Number ? a.value : (a.value * 125) / 100;\n\t}\n\tif (b.type !== Tok.None) {\n\t\tres.b = b.type === Tok.Number ? b.value : (b.value * 125) / 100;\n\t}\n\tif (alpha.type !== Tok.None) {\n\t\tres.alpha = alpha.type === Tok.Number ? alpha.value : alpha.value / 100;\n\t}\n\n\treturn res;\n}\n\nexport default parseLab;\n", "import convertLabToRgb from './convertLabToRgb.js';\nimport convertLabToXyz50 from './convertLabToXyz50.js';\nimport convertRgbToLab from './convertRgbToLab.js';\nimport convertXyz50ToLab from './convertXyz50ToLab.js';\nimport parseLab from './parseLab.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\n\nconst definition = {\n\tmode: 'lab',\n\n\ttoMode: {\n\t\txyz50: convertLabToXyz50,\n\t\trgb: convertLabToRgb\n\t},\n\n\tfromMode: {\n\t\txyz50: convertXyz50ToLab,\n\t\trgb: convertRgbToLab\n\t},\n\n\tchannels: ['l', 'a', 'b', 'alpha'],\n\n\tranges: {\n\t\tl: [0, 100],\n\t\ta: [-100, 100],\n\t\tb: [-100, 100]\n\t},\n\n\tparse: [parseLab],\n\tserialize: c =>\n\t\t`lab(${c.l !== undefined ? c.l : 'none'} ${\n\t\t\tc.a !== undefined ? c.a : 'none'\n\t\t} ${c.b !== undefined ? c.b : 'none'}${\n\t\t\tc.alpha < 1 ? ` / ${c.alpha}` : ''\n\t\t})`,\n\n\tinterpolate: {\n\t\tl: interpolatorLinear,\n\t\ta: interpolatorLinear,\n\t\tb: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t}\n};\n\nexport default definition;\n", "import convertLab65ToRgb from './convertLab65ToRgb.js';\nimport convertLab65ToXyz65 from './convertLab65ToXyz65.js';\nimport convertRgbToLab65 from './convertRgbToLab65.js';\nimport convertXyz65ToLab65 from './convertXyz65ToLab65.js';\nimport lab from '../lab/definition.js';\n\nconst definition = {\n\t...lab,\n\tmode: 'lab65',\n\n\tparse: ['--lab-d65'],\n\tserialize: '--lab-d65',\n\n\ttoMode: {\n\t\txyz65: convertLab65ToXyz65,\n\t\trgb: convertLab65ToRgb\n\t},\n\n\tfromMode: {\n\t\txyz65: convertXyz65ToLab65,\n\t\trgb: convertRgbToLab65\n\t},\n\n\tranges: {\n\t\tl: [0, 100],\n\t\ta: [-86.182, 98.234],\n\t\tb: [-107.86, 94.477]\n\t}\n};\n\nexport default definition;\n", "import { Tok } from '../parse.js';\n\nfunction parseLch(color, parsed) {\n\tif (!parsed || parsed[0] !== 'lch') {\n\t\treturn undefined;\n\t}\n\tconst res = { mode: 'lch' };\n\tconst [, l, c, h, alpha] = parsed;\n\tif (l.type !== Tok.None) {\n\t\tif (l.type === Tok.Hue) {\n\t\t\treturn undefined;\n\t\t}\n\t\tres.l = l.value;\n\t}\n\tif (c.type !== Tok.None) {\n\t\tres.c = Math.max(\n\t\t\t0,\n\t\t\tc.type === Tok.Number ? c.value : (c.value * 150) / 100\n\t\t);\n\t}\n\tif (h.type !== Tok.None) {\n\t\tif (h.type === Tok.Percentage) {\n\t\t\treturn undefined;\n\t\t}\n\t\tres.h = h.value;\n\t}\n\tif (alpha.type !== Tok.None) {\n\t\tres.alpha = alpha.type === Tok.Number ? alpha.value : alpha.value / 100;\n\t}\n\n\treturn res;\n}\n\nexport default parseLch;\n", "import convertLabToLch from './convertLabToLch.js';\nimport convertLchToLab from './convertLchToLab.js';\nimport convertLabToRgb from '../lab/convertLabToRgb.js';\nimport convertRgbToLab from '../lab/convertRgbToLab.js';\nimport parseLch from './parseLch.js';\nimport { fixupHueShorter } from '../fixup/hue.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { differenceHueChroma } from '../difference.js';\nimport { averageAngle } from '../average.js';\n\nconst definition = {\n\tmode: 'lch',\n\n\ttoMode: {\n\t\tlab: convertLchToLab,\n\t\trgb: c => convertLabToRgb(convertLchToLab(c))\n\t},\n\n\tfromMode: {\n\t\trgb: c => convertLabToLch(convertRgbToLab(c)),\n\t\tlab: convertLabToLch\n\t},\n\n\tchannels: ['l', 'c', 'h', 'alpha'],\n\n\tranges: {\n\t\tl: [0, 100],\n\t\tc: [0, 150],\n\t\th: [0, 360]\n\t},\n\n\tparse: [parseLch],\n\tserialize: c =>\n\t\t`lch(${c.l !== undefined ? c.l : 'none'} ${\n\t\t\tc.c !== undefined ? c.c : 'none'\n\t\t} ${c.h || 0}${c.alpha < 1 ? ` / ${c.alpha}` : ''})`,\n\n\tinterpolate: {\n\t\th: { use: interpolatorLinear, fixup: fixupHueShorter },\n\t\tc: interpolatorLinear,\n\t\tl: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t},\n\n\tdifference: {\n\t\th: differenceHueChroma\n\t},\n\n\taverage: {\n\t\th: averageAngle\n\t}\n};\n\nexport default definition;\n", "import convertLabToLch from '../lch/convertLabToLch.js';\nimport convertLchToLab from '../lch/convertLchToLab.js';\nimport convertLab65ToRgb from '../lab65/convertLab65ToRgb.js';\nimport convertRgbToLab65 from '../lab65/convertRgbToLab65.js';\nimport lch from '../lch/definition.js';\n\nconst definition = {\n\t...lch,\n\tmode: 'lch65',\n\n\tparse: ['--lch-d65'],\n\tserialize: '--lch-d65',\n\n\ttoMode: {\n\t\tlab65: c => convertLchToLab(c, 'lab65'),\n\t\trgb: c => convertLab65ToRgb(convertLchToLab(c, 'lab65'))\n\t},\n\n\tfromMode: {\n\t\trgb: c => convertLabToLch(convertRgbToLab65(c), 'lch65'),\n\t\tlab65: c => convertLabToLch(c, 'lch65')\n\t},\n\n\tranges: {\n\t\tl: [0, 100],\n\t\tc: [0, 133.807],\n\t\th: [0, 360]\n\t}\n};\n\nexport default definition;\n", "import normalizeHue from '../util/normalizeHue.js';\n\nconst convertLuvToLchuv = ({ l, u, v, alpha }) => {\n\tlet c = Math.sqrt(u * u + v * v);\n\tlet res = {\n\t\tmode: 'lchuv',\n\t\tl: l,\n\t\tc: c\n\t};\n\tif (c) {\n\t\tres.h = normalizeHue((Math.atan2(v, u) * 180) / Math.PI);\n\t}\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertLuvToLchuv;\n", "const convertLchuvToLuv = ({ l, c, h, alpha }) => {\n\tlet res = {\n\t\tmode: 'luv',\n\t\tl: l,\n\t\tu: c ? c * Math.cos((h / 180) * Math.PI) : 0,\n\t\tv: c ? c * Math.sin((h / 180) * Math.PI) : 0\n\t};\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertLchuvToLuv;\n", "import { k, e } from '../xyz50/constants.js';\nimport { D50 } from '../constants.js';\n\nexport const u_fn = (x, y, z) => (4 * x) / (x + 15 * y + 3 * z);\nexport const v_fn = (x, y, z) => (9 * y) / (x + 15 * y + 3 * z);\n\nexport const un = u_fn(D50.X, D50.Y, D50.Z);\nexport const vn = v_fn(D50.X, D50.Y, D50.Z);\n\nconst l_fn = value => (value <= e ? k * value : 116 * Math.cbrt(value) - 16);\n\nconst convertXyz50ToLuv = ({ x, y, z, alpha }) => {\n\tlet l = l_fn(y / D50.Y);\n\tlet u = u_fn(x, y, z);\n\tlet v = v_fn(x, y, z);\n\n\t// guard against NaNs produced by `xyz(0 0 0)` black\n\tif (!isFinite(u) || !isFinite(v)) {\n\t\tl = u = v = 0;\n\t} else {\n\t\tu = 13 * l * (u - un);\n\t\tv = 13 * l * (v - vn);\n\t}\n\n\tlet res = {\n\t\tmode: 'luv',\n\t\tl,\n\t\tu,\n\t\tv\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertXyz50ToLuv;\n", "import { k } from '../xyz50/constants.js';\nimport { D50 } from '../constants.js';\n\nexport const u_fn = (x, y, z) => (4 * x) / (x + 15 * y + 3 * z);\nexport const v_fn = (x, y, z) => (9 * y) / (x + 15 * y + 3 * z);\n\nexport const un = u_fn(D50.X, D50.Y, D50.Z);\nexport const vn = v_fn(D50.X, D50.Y, D50.Z);\n\nconst convertLuvToXyz50 = ({ l, u, v, alpha }) => {\n\tlet up = u / (13 * l) + un;\n\tlet vp = v / (13 * l) + vn;\n\tlet y = D50.Y * (l <= 8 ? l / k : Math.pow((l + 16) / 116, 3));\n\tlet x = (y * (9 * up)) / (4 * vp);\n\tlet z = (y * (12 - 3 * up - 20 * vp)) / (4 * vp);\n\n\tlet res = { mode: 'xyz50', x, y, z };\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertLuvToXyz50;\n", "/*\n\tCIELChuv color space\n\t--------------------\n\n\tReference: \n\n\t\thttps://en.wikipedia.org/wiki/CIELUV\n */\n\nimport convertLuvToLchuv from './convertLuvToLchuv.js';\nimport convertLchuvToLuv from './convertLchuvToLuv.js';\nimport convertXyz50ToLuv from '../luv/convertXyz50ToLuv.js';\nimport convertLuvToXyz50 from '../luv/convertLuvToXyz50.js';\nimport convertXyz50ToRgb from '../xyz50/convertXyz50ToRgb.js';\nimport convertRgbToXyz50 from '../xyz50/convertRgbToXyz50.js';\n\nimport { fixupHueShorter } from '../fixup/hue.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { differenceHueChroma } from '../difference.js';\nimport { averageAngle } from '../average.js';\n\nconst convertRgbToLchuv = rgb =>\n\tconvertLuvToLchuv(convertXyz50ToLuv(convertRgbToXyz50(rgb)));\nconst convertLchuvToRgb = lchuv =>\n\tconvertXyz50ToRgb(convertLuvToXyz50(convertLchuvToLuv(lchuv)));\n\nconst definition = {\n\tmode: 'lchuv',\n\n\ttoMode: {\n\t\tluv: convertLchuvToLuv,\n\t\trgb: convertLchuvToRgb\n\t},\n\n\tfromMode: {\n\t\trgb: convertRgbToLchuv,\n\t\tluv: convertLuvToLchuv\n\t},\n\n\tchannels: ['l', 'c', 'h', 'alpha'],\n\n\tparse: ['--lchuv'],\n\tserialize: '--lchuv',\n\n\tranges: {\n\t\tl: [0, 100],\n\t\tc: [0, 176.956],\n\t\th: [0, 360]\n\t},\n\n\tinterpolate: {\n\t\th: { use: interpolatorLinear, fixup: fixupHueShorter },\n\t\tc: interpolatorLinear,\n\t\tl: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t},\n\n\tdifference: {\n\t\th: differenceHueChroma\n\t},\n\n\taverage: {\n\t\th: averageAngle\n\t}\n};\n\nexport default definition;\n", "import rgb from '../rgb/definition.js';\nimport convertRgbToLrgb from './convertRgbToLrgb.js';\nimport convertLrgbToRgb from './convertLrgbToRgb.js';\n\nconst definition = {\n\t...rgb,\n\tmode: 'lrgb',\n\n\ttoMode: {\n\t\trgb: convertLrgbToRgb\n\t},\n\n\tfromMode: {\n\t\trgb: convertRgbToLrgb\n\t},\n\n\tparse: ['srgb-linear'],\n\tserialize: 'srgb-linear'\n};\n\nexport default definition;\n", "/*\n\tCIELUV color space\n\t------------------\n\n\tReference: \n\n\t\thttps://en.wikipedia.org/wiki/CIELUV\n */\n\nimport convertXyz50ToLuv from './convertXyz50ToLuv.js';\nimport convertLuvToXyz50 from './convertLuvToXyz50.js';\nimport convertXyz50ToRgb from '../xyz50/convertXyz50ToRgb.js';\nimport convertRgbToXyz50 from '../xyz50/convertRgbToXyz50.js';\n\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\n\nconst definition = {\n\tmode: 'luv',\n\n\ttoMode: {\n\t\txyz50: convertLuvToXyz50,\n\t\trgb: luv => convertXyz50ToRgb(convertLuvToXyz50(luv))\n\t},\n\n\tfromMode: {\n\t\txyz50: convertXyz50ToLuv,\n\t\trgb: rgb => convertXyz50ToLuv(convertRgbToXyz50(rgb))\n\t},\n\n\tchannels: ['l', 'u', 'v', 'alpha'],\n\n\tparse: ['--luv'],\n\tserialize: '--luv',\n\n\tranges: {\n\t\tl: [0, 100],\n\t\tu: [-84.936, 175.042],\n\t\tv: [-125.882, 87.243]\n\t},\n\n\tinterpolate: {\n\t\tl: interpolatorLinear,\n\t\tu: interpolatorLinear,\n\t\tv: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t}\n};\n\nexport default definition;\n", "const convertLrgbToOklab = ({ r, g, b, alpha }) => {\n\tlet L = Math.cbrt(\n\t\t0.41222147079999993 * r + 0.5363325363 * g + 0.0514459929 * b\n\t);\n\tlet M = Math.cbrt(\n\t\t0.2119034981999999 * r + 0.6806995450999999 * g + 0.1073969566 * b\n\t);\n\tlet S = Math.cbrt(\n\t\t0.08830246189999998 * r + 0.2817188376 * g + 0.6299787005000002 * b\n\t);\n\n\tlet res = {\n\t\tmode: 'oklab',\n\t\tl: 0.2104542553 * L + 0.793617785 * M - 0.0040720468 * S,\n\t\ta: 1.9779984951 * L - 2.428592205 * M + 0.4505937099 * S,\n\t\tb: 0.0259040371 * L + 0.7827717662 * M - 0.808675766 * S\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertLrgbToOklab;\n", "import convertRgbToLrgb from '../lrgb/convertRgbToLrgb.js';\nimport convertLrgbToOklab from './convertLrgbToOklab.js';\n\nconst convertRgbToOklab = rgb => {\n\tlet res = convertLrgbToOklab(convertRgbToLrgb(rgb));\n\tif (rgb.r === rgb.b && rgb.b === rgb.g) {\n\t\tres.a = res.b = 0;\n\t}\n\treturn res;\n};\n\nexport default convertRgbToOklab;\n", "const convertOklabToLrgb = ({ l, a, b, alpha }) => {\n\tlet L = Math.pow(\n\t\tl * 0.99999999845051981432 +\n\t\t\t0.39633779217376785678 * a +\n\t\t\t0.21580375806075880339 * b,\n\t\t3\n\t);\n\tlet M = Math.pow(\n\t\tl * 1.0000000088817607767 -\n\t\t\t0.1055613423236563494 * a -\n\t\t\t0.063854174771705903402 * b,\n\t\t3\n\t);\n\tlet S = Math.pow(\n\t\tl * 1.0000000546724109177 -\n\t\t\t0.089484182094965759684 * a -\n\t\t\t1.2914855378640917399 * b,\n\t\t3\n\t);\n\n\tlet res = {\n\t\tmode: 'lrgb',\n\t\tr:\n\t\t\t+4.076741661347994 * L -\n\t\t\t3.307711590408193 * M +\n\t\t\t0.230969928729428 * S,\n\t\tg:\n\t\t\t-1.2684380040921763 * L +\n\t\t\t2.6097574006633715 * M -\n\t\t\t0.3413193963102197 * S,\n\t\tb:\n\t\t\t-0.004196086541837188 * L -\n\t\t\t0.7034186144594493 * M +\n\t\t\t1.7076147009309444 * S\n\t};\n\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\n\treturn res;\n};\n\nexport default convertOklabToLrgb;\n", "import convertLrgbToRgb from '../lrgb/convertLrgbToRgb.js';\nimport convertOklabToLrgb from './convertOklabToLrgb.js';\n\nconst convertOklabToRgb = c => convertLrgbToRgb(convertOklabToLrgb(c));\n\nexport default convertOklabToRgb;\n", "/*\n\tAdapted from code by Björn Ottosson,\n\treleased under the MIT license:\n\n\tCopyright (c) 2021 Björn Ottosson\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of\n\tthis software and associated documentation files (the \"Software\"), to deal in\n\tthe Software without restriction, including without limitation the rights to\n\tuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n\tof the Software, and to permit persons to whom the Software is furnished to do\n\tso, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n */\n\nimport convertOklabToLrgb from '../oklab/convertOklabToLrgb.js';\n\nexport function toe(x) {\n\tconst k_1 = 0.206;\n\tconst k_2 = 0.03;\n\tconst k_3 = (1 + k_1) / (1 + k_2);\n\treturn (\n\t\t0.5 *\n\t\t(k_3 * x -\n\t\t\tk_1 +\n\t\t\tMath.sqrt((k_3 * x - k_1) * (k_3 * x - k_1) + 4 * k_2 * k_3 * x))\n\t);\n}\n\nexport function toe_inv(x) {\n\tconst k_1 = 0.206;\n\tconst k_2 = 0.03;\n\tconst k_3 = (1 + k_1) / (1 + k_2);\n\treturn (x * x + k_1 * x) / (k_3 * (x + k_2));\n}\n\n// Finds the maximum saturation possible for a given hue that fits in sRGB\n// Saturation here is defined as S = C/L\n// a and b must be normalized so a^2 + b^2 == 1\nfunction compute_max_saturation(a, b) {\n\t// Max saturation will be when one of r, g or b goes below zero.\n\n\t// Select different coefficients depending on which component goes below zero first\n\tlet k0, k1, k2, k3, k4, wl, wm, ws;\n\n\tif (-1.88170328 * a - 0.80936493 * b > 1) {\n\t\t// Red component\n\t\tk0 = +1.19086277;\n\t\tk1 = +1.76576728;\n\t\tk2 = +0.59662641;\n\t\tk3 = +0.75515197;\n\t\tk4 = +0.56771245;\n\t\twl = +4.0767416621;\n\t\twm = -3.3077115913;\n\t\tws = +0.2309699292;\n\t} else if (1.81444104 * a - 1.19445276 * b > 1) {\n\t\t// Green component\n\t\tk0 = +0.73956515;\n\t\tk1 = -0.45954404;\n\t\tk2 = +0.08285427;\n\t\tk3 = +0.1254107;\n\t\tk4 = +0.14503204;\n\t\twl = -1.2684380046;\n\t\twm = +2.6097574011;\n\t\tws = -0.3413193965;\n\t} else {\n\t\t// Blue component\n\t\tk0 = +1.35733652;\n\t\tk1 = -0.00915799;\n\t\tk2 = -1.1513021;\n\t\tk3 = -0.50559606;\n\t\tk4 = +0.00692167;\n\t\twl = -0.0041960863;\n\t\twm = -0.7034186147;\n\t\tws = +1.707614701;\n\t}\n\n\t// Approximate max saturation using a polynomial:\n\tlet S = k0 + k1 * a + k2 * b + k3 * a * a + k4 * a * b;\n\n\t// Do one step Halley's method to get closer\n\t// this gives an error less than 10e6, except for some blue hues where the dS/dh is close to infinite\n\t// this should be sufficient for most applications, otherwise do two/three steps\n\n\tlet k_l = +0.3963377774 * a + 0.2158037573 * b;\n\tlet k_m = -0.1055613458 * a - 0.0638541728 * b;\n\tlet k_s = -0.0894841775 * a - 1.291485548 * b;\n\n\t{\n\t\tlet l_ = 1 + S * k_l;\n\t\tlet m_ = 1 + S * k_m;\n\t\tlet s_ = 1 + S * k_s;\n\n\t\tlet l = l_ * l_ * l_;\n\t\tlet m = m_ * m_ * m_;\n\t\tlet s = s_ * s_ * s_;\n\n\t\tlet l_dS = 3 * k_l * l_ * l_;\n\t\tlet m_dS = 3 * k_m * m_ * m_;\n\t\tlet s_dS = 3 * k_s * s_ * s_;\n\n\t\tlet l_dS2 = 6 * k_l * k_l * l_;\n\t\tlet m_dS2 = 6 * k_m * k_m * m_;\n\t\tlet s_dS2 = 6 * k_s * k_s * s_;\n\n\t\tlet f = wl * l + wm * m + ws * s;\n\t\tlet f1 = wl * l_dS + wm * m_dS + ws * s_dS;\n\t\tlet f2 = wl * l_dS2 + wm * m_dS2 + ws * s_dS2;\n\n\t\tS = S - (f * f1) / (f1 * f1 - 0.5 * f * f2);\n\t}\n\n\treturn S;\n}\n\nexport function find_cusp(a, b) {\n\t// First, find the maximum saturation (saturation S = C/L)\n\tlet S_cusp = compute_max_saturation(a, b);\n\n\t// Convert to linear sRGB to find the first point where at least one of r,g or b >= 1:\n\tlet rgb = convertOklabToLrgb({ l: 1, a: S_cusp * a, b: S_cusp * b });\n\tlet L_cusp = Math.cbrt(1 / Math.max(rgb.r, rgb.g, rgb.b));\n\tlet C_cusp = L_cusp * S_cusp;\n\n\treturn [L_cusp, C_cusp];\n}\n\n// Finds intersection of the line defined by\n// L = L0 * (1 - t) + t * L1;\n// C = t * C1;\n// a and b must be normalized so a^2 + b^2 == 1\nfunction find_gamut_intersection(a, b, L1, C1, L0, cusp = null) {\n\tif (!cusp) {\n\t\t// Find the cusp of the gamut triangle\n\t\tcusp = find_cusp(a, b);\n\t}\n\n\t// Find the intersection for upper and lower half seprately\n\tlet t;\n\tif ((L1 - L0) * cusp[1] - (cusp[0] - L0) * C1 <= 0) {\n\t\t// Lower half\n\n\t\tt = (cusp[1] * L0) / (C1 * cusp[0] + cusp[1] * (L0 - L1));\n\t} else {\n\t\t// Upper half\n\n\t\t// First intersect with triangle\n\t\tt = (cusp[1] * (L0 - 1)) / (C1 * (cusp[0] - 1) + cusp[1] * (L0 - L1));\n\n\t\t// Then one step Halley's method\n\t\t{\n\t\t\tlet dL = L1 - L0;\n\t\t\tlet dC = C1;\n\n\t\t\tlet k_l = +0.3963377774 * a + 0.2158037573 * b;\n\t\t\tlet k_m = -0.1055613458 * a - 0.0638541728 * b;\n\t\t\tlet k_s = -0.0894841775 * a - 1.291485548 * b;\n\n\t\t\tlet l_dt = dL + dC * k_l;\n\t\t\tlet m_dt = dL + dC * k_m;\n\t\t\tlet s_dt = dL + dC * k_s;\n\n\t\t\t// If higher accuracy is required, 2 or 3 iterations of the following block can be used:\n\t\t\t{\n\t\t\t\tlet L = L0 * (1 - t) + t * L1;\n\t\t\t\tlet C = t * C1;\n\n\t\t\t\tlet l_ = L + C * k_l;\n\t\t\t\tlet m_ = L + C * k_m;\n\t\t\t\tlet s_ = L + C * k_s;\n\n\t\t\t\tlet l = l_ * l_ * l_;\n\t\t\t\tlet m = m_ * m_ * m_;\n\t\t\t\tlet s = s_ * s_ * s_;\n\n\t\t\t\tlet ldt = 3 * l_dt * l_ * l_;\n\t\t\t\tlet mdt = 3 * m_dt * m_ * m_;\n\t\t\t\tlet sdt = 3 * s_dt * s_ * s_;\n\n\t\t\t\tlet ldt2 = 6 * l_dt * l_dt * l_;\n\t\t\t\tlet mdt2 = 6 * m_dt * m_dt * m_;\n\t\t\t\tlet sdt2 = 6 * s_dt * s_dt * s_;\n\n\t\t\t\tlet r =\n\t\t\t\t\t4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s - 1;\n\t\t\t\tlet r1 =\n\t\t\t\t\t4.0767416621 * ldt -\n\t\t\t\t\t3.3077115913 * mdt +\n\t\t\t\t\t0.2309699292 * sdt;\n\t\t\t\tlet r2 =\n\t\t\t\t\t4.0767416621 * ldt2 -\n\t\t\t\t\t3.3077115913 * mdt2 +\n\t\t\t\t\t0.2309699292 * sdt2;\n\n\t\t\t\tlet u_r = r1 / (r1 * r1 - 0.5 * r * r2);\n\t\t\t\tlet t_r = -r * u_r;\n\n\t\t\t\tlet g =\n\t\t\t\t\t-1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s - 1;\n\t\t\t\tlet g1 =\n\t\t\t\t\t-1.2684380046 * ldt +\n\t\t\t\t\t2.6097574011 * mdt -\n\t\t\t\t\t0.3413193965 * sdt;\n\t\t\t\tlet g2 =\n\t\t\t\t\t-1.2684380046 * ldt2 +\n\t\t\t\t\t2.6097574011 * mdt2 -\n\t\t\t\t\t0.3413193965 * sdt2;\n\n\t\t\t\tlet u_g = g1 / (g1 * g1 - 0.5 * g * g2);\n\t\t\t\tlet t_g = -g * u_g;\n\n\t\t\t\tlet b =\n\t\t\t\t\t-0.0041960863 * l - 0.7034186147 * m + 1.707614701 * s - 1;\n\t\t\t\tlet b1 =\n\t\t\t\t\t-0.0041960863 * ldt -\n\t\t\t\t\t0.7034186147 * mdt +\n\t\t\t\t\t1.707614701 * sdt;\n\t\t\t\tlet b2 =\n\t\t\t\t\t-0.0041960863 * ldt2 -\n\t\t\t\t\t0.7034186147 * mdt2 +\n\t\t\t\t\t1.707614701 * sdt2;\n\n\t\t\t\tlet u_b = b1 / (b1 * b1 - 0.5 * b * b2);\n\t\t\t\tlet t_b = -b * u_b;\n\n\t\t\t\tt_r = u_r >= 0 ? t_r : 10e5;\n\t\t\t\tt_g = u_g >= 0 ? t_g : 10e5;\n\t\t\t\tt_b = u_b >= 0 ? t_b : 10e5;\n\n\t\t\t\tt += Math.min(t_r, Math.min(t_g, t_b));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn t;\n}\n\nexport function get_ST_max(a_, b_, cusp = null) {\n\tif (!cusp) {\n\t\tcusp = find_cusp(a_, b_);\n\t}\n\tlet L = cusp[0];\n\tlet C = cusp[1];\n\treturn [C / L, C / (1 - L)];\n}\n\nexport function get_ST_mid(a_, b_) {\n\tlet S =\n\t\t0.11516993 +\n\t\t1 /\n\t\t\t(+7.4477897 +\n\t\t\t\t4.1590124 * b_ +\n\t\t\t\ta_ *\n\t\t\t\t\t(-2.19557347 +\n\t\t\t\t\t\t1.75198401 * b_ +\n\t\t\t\t\t\ta_ *\n\t\t\t\t\t\t\t(-2.13704948 -\n\t\t\t\t\t\t\t\t10.02301043 * b_ +\n\t\t\t\t\t\t\t\ta_ *\n\t\t\t\t\t\t\t\t\t(-4.24894561 +\n\t\t\t\t\t\t\t\t\t\t5.38770819 * b_ +\n\t\t\t\t\t\t\t\t\t\t4.69891013 * a_))));\n\n\tlet T =\n\t\t0.11239642 +\n\t\t1 /\n\t\t\t(+1.6132032 -\n\t\t\t\t0.68124379 * b_ +\n\t\t\t\ta_ *\n\t\t\t\t\t(+0.40370612 +\n\t\t\t\t\t\t0.90148123 * b_ +\n\t\t\t\t\t\ta_ *\n\t\t\t\t\t\t\t(-0.27087943 +\n\t\t\t\t\t\t\t\t0.6122399 * b_ +\n\t\t\t\t\t\t\t\ta_ *\n\t\t\t\t\t\t\t\t\t(+0.00299215 -\n\t\t\t\t\t\t\t\t\t\t0.45399568 * b_ -\n\t\t\t\t\t\t\t\t\t\t0.14661872 * a_))));\n\n\treturn [S, T];\n}\n\nexport function get_Cs(L, a_, b_) {\n\tlet cusp = find_cusp(a_, b_);\n\n\tlet C_max = find_gamut_intersection(a_, b_, L, 1, L, cusp);\n\tlet ST_max = get_ST_max(a_, b_, cusp);\n\n\tlet S_mid =\n\t\t0.11516993 +\n\t\t1 /\n\t\t\t(+7.4477897 +\n\t\t\t\t4.1590124 * b_ +\n\t\t\t\ta_ *\n\t\t\t\t\t(-2.19557347 +\n\t\t\t\t\t\t1.75198401 * b_ +\n\t\t\t\t\t\ta_ *\n\t\t\t\t\t\t\t(-2.13704948 -\n\t\t\t\t\t\t\t\t10.02301043 * b_ +\n\t\t\t\t\t\t\t\ta_ *\n\t\t\t\t\t\t\t\t\t(-4.24894561 +\n\t\t\t\t\t\t\t\t\t\t5.38770819 * b_ +\n\t\t\t\t\t\t\t\t\t\t4.69891013 * a_))));\n\n\tlet T_mid =\n\t\t0.11239642 +\n\t\t1 /\n\t\t\t(+1.6132032 -\n\t\t\t\t0.68124379 * b_ +\n\t\t\t\ta_ *\n\t\t\t\t\t(+0.40370612 +\n\t\t\t\t\t\t0.90148123 * b_ +\n\t\t\t\t\t\ta_ *\n\t\t\t\t\t\t\t(-0.27087943 +\n\t\t\t\t\t\t\t\t0.6122399 * b_ +\n\t\t\t\t\t\t\t\ta_ *\n\t\t\t\t\t\t\t\t\t(+0.00299215 -\n\t\t\t\t\t\t\t\t\t\t0.45399568 * b_ -\n\t\t\t\t\t\t\t\t\t\t0.14661872 * a_))));\n\n\tlet k = C_max / Math.min(L * ST_max[0], (1 - L) * ST_max[1]);\n\n\tlet C_a = L * S_mid;\n\tlet C_b = (1 - L) * T_mid;\n\tlet C_mid =\n\t\t0.9 *\n\t\tk *\n\t\tMath.sqrt(\n\t\t\tMath.sqrt(\n\t\t\t\t1 / (1 / (C_a * C_a * C_a * C_a) + 1 / (C_b * C_b * C_b * C_b))\n\t\t\t)\n\t\t);\n\n\tC_a = L * 0.4;\n\tC_b = (1 - L) * 0.8;\n\tlet C_0 = Math.sqrt(1 / (1 / (C_a * C_a) + 1 / (C_b * C_b)));\n\treturn [C_0, C_mid, C_max];\n}\n", "/*\n\tAdapted from code by Björn Ottosson,\n\treleased under the MIT license:\n\n\tCopyright (c) 2021 Björn Ottosson\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of\n\tthis software and associated documentation files (the \"Software\"), to deal in\n\tthe Software without restriction, including without limitation the rights to\n\tuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n\tof the Software, and to permit persons to whom the Software is furnished to do\n\tso, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n */\n\nimport normalizeHue from '../util/normalizeHue.js';\nimport { get_Cs, toe } from './helpers.js';\n\nexport default function convertOklabToOkhsl(lab) {\n\tconst ret = { mode: 'okhsl', l: toe(lab.l) };\n\n\tif (lab.alpha !== undefined) {\n\t\tret.alpha = lab.alpha;\n\t}\n\tlet c = Math.sqrt(lab.a * lab.a + lab.b * lab.b);\n\tif (!c) {\n\t\tret.s = 0;\n\t\treturn ret;\n\t}\n\tlet [C_0, C_mid, C_max] = get_Cs(lab.l, lab.a / c, lab.b / c);\n\tlet s;\n\tif (c < C_mid) {\n\t\tlet k_0 = 0;\n\t\tlet k_1 = 0.8 * C_0;\n\t\tlet k_2 = 1 - k_1 / C_mid;\n\t\tlet t = (c - k_0) / (k_1 + k_2 * (c - k_0));\n\t\ts = t * 0.8;\n\t} else {\n\t\tlet k_0 = C_mid;\n\t\tlet k_1 = (0.2 * C_mid * C_mid * 1.25 * 1.25) / C_0;\n\t\tlet k_2 = 1 - k_1 / (C_max - C_mid);\n\t\tlet t = (c - k_0) / (k_1 + k_2 * (c - k_0));\n\t\ts = 0.8 + 0.2 * t;\n\t}\n\tif (s) {\n\t\tret.s = s;\n\t\tret.h = normalizeHue((Math.atan2(lab.b, lab.a) * 180) / Math.PI);\n\t}\n\treturn ret;\n}\n", "/*\n\tAdapted from code by Björn Ottosson,\n\treleased under the MIT license:\n\n\tCopyright (c) 2021 Björn Ottosson\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of\n\tthis software and associated documentation files (the \"Software\"), to deal in\n\tthe Software without restriction, including without limitation the rights to\n\tuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n\tof the Software, and to permit persons to whom the Software is furnished to do\n\tso, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n */\n\nimport { toe_inv, get_Cs } from './helpers.js';\n\nexport default function convertOkhslToOklab(hsl) {\n\tlet l = toe_inv(hsl.l);\n\n\tconst ret = { mode: 'oklab', l };\n\n\tif (hsl.alpha !== undefined) {\n\t\tret.alpha = hsl.alpha;\n\t}\n\n\tif (!hsl.s || hsl.l === 1) {\n\t\tret.a = ret.b = 0;\n\t\treturn ret;\n\t}\n\n\tlet a_ = Math.cos((hsl.h / 180) * Math.PI);\n\tlet b_ = Math.sin((hsl.h / 180) * Math.PI);\n\tlet [C_0, C_mid, C_max] = get_Cs(l, a_, b_);\n\tlet t, k_0, k_1, k_2;\n\tif (hsl.s < 0.8) {\n\t\tt = 1.25 * hsl.s;\n\t\tk_0 = 0;\n\t\tk_1 = 0.8 * C_0;\n\t\tk_2 = 1 - k_1 / C_mid;\n\t} else {\n\t\tt = 5 * (hsl.s - 0.8);\n\t\tk_0 = C_mid;\n\t\tk_1 = (0.2 * C_mid * C_mid * 1.25 * 1.25) / C_0;\n\t\tk_2 = 1 - k_1 / (C_max - C_mid);\n\t}\n\tlet C = k_0 + (t * k_1) / (1 - k_2 * t);\n\tret.a = C * a_;\n\tret.b = C * b_;\n\n\treturn ret;\n}\n", "import convertRgbToOklab from '../oklab/convertRgbToOklab.js';\nimport convertOklabToRgb from '../oklab/convertOklabToRgb.js';\nimport convertOklabToOkhsl from './convertOklabToOkhsl.js';\nimport convertOkhslToOklab from './convertOkhslToOklab.js';\n\nimport modeHsl from '../hsl/definition.js';\n\nconst modeOkhsl = {\n\t...modeHsl,\n\tmode: 'okhsl',\n\tchannels: ['h', 's', 'l', 'alpha'],\n\tparse: ['--okhsl'],\n\tserialize: '--okhsl',\n\tfromMode: {\n\t\toklab: convertOklabToOkhsl,\n\t\trgb: c => convertOklabToOkhsl(convertRgbToOklab(c))\n\t},\n\ttoMode: {\n\t\toklab: convertOkhslToOklab,\n\t\trgb: c => convertOklabToRgb(convertOkhslToOklab(c))\n\t}\n};\n\nexport default modeOkhsl;\n", "/*\n\tAdapted from code by Björn Ottosson,\n\treleased under the MIT license:\n\n\tCopyright (c) 2021 Björn Ottosson\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of\n\tthis software and associated documentation files (the \"Software\"), to deal in\n\tthe Software without restriction, including without limitation the rights to\n\tuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n\tof the Software, and to permit persons to whom the Software is furnished to do\n\tso, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n */\n\nimport normalizeHue from '../util/normalizeHue.js';\nimport convertOklabToLrgb from '../oklab/convertOklabToLrgb.js';\nimport { get_ST_max, toe_inv, toe } from '../okhsl/helpers.js';\n\nexport default function convertOklabToOkhsv(lab) {\n\tlet c = Math.sqrt(lab.a * lab.a + lab.b * lab.b);\n\n\tlet l = lab.l;\n\t// TODO: c = 0\n\tlet a_ = c ? lab.a / c : 1;\n\tlet b_ = c ? lab.b / c : 1;\n\n\tlet [S_max, T] = get_ST_max(a_, b_);\n\tlet S_0 = 0.5;\n\tlet k = 1 - S_0 / S_max;\n\n\tlet t = T / (c + l * T);\n\tlet L_v = t * l;\n\tlet C_v = t * c;\n\n\tlet L_vt = toe_inv(L_v);\n\tlet C_vt = (C_v * L_vt) / L_v;\n\n\tlet rgb_scale = convertOklabToLrgb({ l: L_vt, a: a_ * C_vt, b: b_ * C_vt });\n\tlet scale_L = Math.cbrt(\n\t\t1 / Math.max(rgb_scale.r, rgb_scale.g, rgb_scale.b, 0)\n\t);\n\n\tl = l / scale_L;\n\tc = ((c / scale_L) * toe(l)) / l;\n\tl = toe(l);\n\n\tconst ret = {\n\t\tmode: 'okhsv',\n\t\ts: c ? ((S_0 + T) * C_v) / (T * S_0 + T * k * C_v) : 0,\n\t\tv: l ? l / L_v : 0\n\t};\n\tif (ret.s) {\n\t\tret.h = normalizeHue((Math.atan2(lab.b, lab.a) * 180) / Math.PI);\n\t}\n\tif (lab.alpha !== undefined) {\n\t\tret.alpha = lab.alpha;\n\t}\n\treturn ret;\n}\n", "/*\n\tCopyright (c) 2021 Björn Ottosson\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of\n\tthis software and associated documentation files (the \"Software\"), to deal in\n\tthe Software without restriction, including without limitation the rights to\n\tuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n\tof the Software, and to permit persons to whom the Software is furnished to do\n\tso, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n */\n\nimport convertOklabToLrgb from '../oklab/convertOklabToLrgb.js';\nimport { get_ST_max, toe_inv } from '../okhsl/helpers.js';\n\nexport default function convertOkhsvToOklab(hsv) {\n\tconst ret = { mode: 'oklab' };\n\tif (hsv.alpha !== undefined) {\n\t\tret.alpha = hsv.alpha;\n\t}\n\n\t// Hue may be missing for achromatic colors\n\tconst h = hsv.h || 0;\n\n\tconst a_ = Math.cos((h / 180) * Math.PI);\n\tconst b_ = Math.sin((h / 180) * Math.PI);\n\n\tconst [S_max, T] = get_ST_max(a_, b_);\n\tconst S_0 = 0.5;\n\tconst k = 1 - S_0 / S_max;\n\tconst L_v = 1 - (hsv.s * S_0) / (S_0 + T - T * k * hsv.s);\n\tconst C_v = (hsv.s * T * S_0) / (S_0 + T - T * k * hsv.s);\n\n\tconst L_vt = toe_inv(L_v);\n\tconst C_vt = (C_v * L_vt) / L_v;\n\tconst rgb_scale = convertOklabToLrgb({\n\t\tl: L_vt,\n\t\ta: a_ * C_vt,\n\t\tb: b_ * C_vt\n\t});\n\tconst scale_L = Math.cbrt(\n\t\t1 / Math.max(rgb_scale.r, rgb_scale.g, rgb_scale.b, 0)\n\t);\n\n\tconst L_new = toe_inv(hsv.v * L_v);\n\tconst C = (C_v * L_new) / L_v;\n\n\tret.l = L_new * scale_L;\n\tret.a = C * a_ * scale_L;\n\tret.b = C * b_ * scale_L;\n\n\treturn ret;\n}\n", "import convertRgbToOklab from '../oklab/convertRgbToOklab.js';\nimport convertOklabToRgb from '../oklab/convertOklabToRgb.js';\nimport convertOklabToOkhsv from './convertOklabToOkhsv.js';\nimport convertOkhsvToOklab from './convertOkhsvToOklab.js';\n\nimport modeHsv from '../hsv/definition.js';\n\nconst modeOkhsv = {\n\t...modeHsv,\n\tmode: 'okhsv',\n\tchannels: ['h', 's', 'v', 'alpha'],\n\tparse: ['--okhsv'],\n\tserialize: '--okhsv',\n\tfromMode: {\n\t\toklab: convertOklabToOkhsv,\n\t\trgb: c => convertOklabToOkhsv(convertRgbToOklab(c))\n\t},\n\ttoMode: {\n\t\toklab: convertOkhsvToOklab,\n\t\trgb: c => convertOklabToRgb(convertOkhsvToOklab(c))\n\t}\n};\n\nexport default modeOkhsv;\n", "import { Tok } from '../parse.js';\n\nfunction parseOklab(color, parsed) {\n\tif (!parsed || parsed[0] !== 'oklab') {\n\t\treturn undefined;\n\t}\n\tconst res = { mode: 'oklab' };\n\tconst [, l, a, b, alpha] = parsed;\n\tif (l.type === Tok.Hue || a.type === Tok.Hue || b.type === Tok.Hue) {\n\t\treturn undefined;\n\t}\n\tif (l.type !== Tok.None) {\n\t\tres.l = l.type === Tok.Number ? l.value : l.value / 100;\n\t}\n\tif (a.type !== Tok.None) {\n\t\tres.a = a.type === Tok.Number ? a.value : (a.value * 0.4) / 100;\n\t}\n\tif (b.type !== Tok.None) {\n\t\tres.b = b.type === Tok.Number ? b.value : (b.value * 0.4) / 100;\n\t}\n\tif (alpha.type !== Tok.None) {\n\t\tres.alpha = alpha.type === Tok.Number ? alpha.value : alpha.value / 100;\n\t}\n\n\treturn res;\n}\n\nexport default parseOklab;\n", "import convertOklabToLrgb from './convertOklabToLrgb.js';\nimport convertLrgbToOklab from './convertLrgbToOklab.js';\nimport convertRgbToOklab from './convertRgbToOklab.js';\nimport convertOklabToRgb from './convertOklabToRgb.js';\nimport parseOklab from './parseOklab.js';\n\nimport lab from '../lab/definition.js';\n\n/*\n\tOklab, a perceptual color space for image processing by Björn Ottosson\n\tReference: https://bottosson.github.io/posts/oklab/\n */\n\nconst definition = {\n\t...lab,\n\tmode: 'oklab',\n\n\ttoMode: {\n\t\tlrgb: convertOklabToLrgb,\n\t\trgb: convertOklabToRgb\n\t},\n\n\tfromMode: {\n\t\tlrgb: convertLrgbToOklab,\n\t\trgb: convertRgbToOklab\n\t},\n\n\tranges: {\n\t\tl: [0, 1],\n\t\ta: [-0.4, 0.4],\n\t\tb: [-0.4, 0.4]\n\t},\n\n\tparse: [parseOklab],\n\tserialize: c =>\n\t\t`oklab(${c.l !== undefined ? c.l : 'none'} ${\n\t\t\tc.a !== undefined ? c.a : 'none'\n\t\t} ${c.b !== undefined ? c.b : 'none'}${\n\t\t\tc.alpha < 1 ? ` / ${c.alpha}` : ''\n\t\t})`\n};\n\nexport default definition;\n", "import { Tok } from '../parse.js';\n\nfunction parseOklch(color, parsed) {\n\tif (!parsed || parsed[0] !== 'oklch') {\n\t\treturn undefined;\n\t}\n\tconst res = { mode: 'oklch' };\n\tconst [, l, c, h, alpha] = parsed;\n\tif (l.type !== Tok.None) {\n\t\tif (l.type === Tok.Hue) {\n\t\t\treturn undefined;\n\t\t}\n\t\tres.l = l.type === Tok.Number ? l.value : l.value / 100;\n\t}\n\tif (c.type !== Tok.None) {\n\t\tres.c = Math.max(\n\t\t\t0,\n\t\t\tc.type === Tok.Number ? c.value : (c.value * 0.4) / 100\n\t\t);\n\t}\n\tif (h.type !== Tok.None) {\n\t\tif (h.type === Tok.Percentage) {\n\t\t\treturn undefined;\n\t\t}\n\t\tres.h = h.value;\n\t}\n\tif (alpha.type !== Tok.None) {\n\t\tres.alpha = alpha.type === Tok.Number ? alpha.value : alpha.value / 100;\n\t}\n\n\treturn res;\n}\n\nexport default parseOklch;\n", "import lch from '../lch/definition.js';\nimport convertLabToLch from '../lch/convertLabToLch.js';\nimport convertLchToLab from '../lch/convertLchToLab.js';\nimport convertOklabToRgb from '../oklab/convertOklabToRgb.js';\nimport convertRgbToOklab from '../oklab/convertRgbToOklab.js';\nimport parseOklch from './parseOklch.js';\n\nconst definition = {\n\t...lch,\n\tmode: 'oklch',\n\n\ttoMode: {\n\t\toklab: c => convertLchToLab(c, 'oklab'),\n\t\trgb: c => convertOklabToRgb(convertLchToLab(c, 'oklab'))\n\t},\n\n\tfromMode: {\n\t\trgb: c => convertLabToLch(convertRgbToOklab(c), 'oklch'),\n\t\toklab: c => convertLabToLch(c, 'oklch')\n\t},\n\n\tparse: [parseOklch],\n\tserialize: c =>\n\t\t`oklch(${c.l !== undefined ? c.l : 'none'} ${\n\t\t\tc.c !== undefined ? c.c : 'none'\n\t\t} ${c.h || 0}${c.alpha < 1 ? ` / ${c.alpha}` : ''})`,\n\n\tranges: {\n\t\tl: [0, 1],\n\t\tc: [0, 0.4],\n\t\th: [0, 360]\n\t}\n};\n\nexport default definition;\n", "/*\n\tConvert Display P3 values to CIE XYZ D65\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n*/\n\nimport convertRgbToLrgb from '../lrgb/convertRgbToLrgb.js';\n\nconst convertP3ToXyz65 = rgb => {\n\tlet { r, g, b, alpha } = convertRgbToLrgb(rgb);\n\tlet res = {\n\t\tmode: 'xyz65',\n\t\tx:\n\t\t\t0.486570948648216 * r +\n\t\t\t0.265667693169093 * g +\n\t\t\t0.1982172852343625 * b,\n\t\ty:\n\t\t\t0.2289745640697487 * r +\n\t\t\t0.6917385218365062 * g +\n\t\t\t0.079286914093745 * b,\n\t\tz: 0.0 * r + 0.0451133818589026 * g + 1.043944368900976 * b\n\t};\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertP3ToXyz65;\n", "/*\n\tCIE XYZ D65 values to Display P3.\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n*/\n\nimport convertLrgbToRgb from '../lrgb/convertLrgbToRgb.js';\n\nconst convertXyz65ToP3 = ({ x, y, z, alpha }) => {\n\tlet res = convertLrgbToRgb(\n\t\t{\n\t\t\tr:\n\t\t\t\tx * 2.4934969119414263 -\n\t\t\t\ty * 0.9313836179191242 -\n\t\t\t\t0.402710784450717 * z,\n\t\t\tg:\n\t\t\t\tx * -0.8294889695615749 +\n\t\t\t\ty * 1.7626640603183465 +\n\t\t\t\t0.0236246858419436 * z,\n\t\t\tb:\n\t\t\t\tx * 0.0358458302437845 -\n\t\t\t\ty * 0.0761723892680418 +\n\t\t\t\t0.9568845240076871 * z\n\t\t},\n\t\t'p3'\n\t);\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertXyz65ToP3;\n", "import rgb from '../rgb/definition.js';\nimport convertP3ToXyz65 from './convertP3ToXyz65.js';\nimport convertXyz65ToP3 from './convertXyz65ToP3.js';\nimport convertRgbToXyz65 from '../xyz65/convertRgbToXyz65.js';\nimport convertXyz65ToRgb from '../xyz65/convertXyz65ToRgb.js';\n\nconst definition = {\n\t...rgb,\n\tmode: 'p3',\n\tparse: ['display-p3'],\n\tserialize: 'display-p3',\n\n\tfromMode: {\n\t\trgb: color => convertXyz65ToP3(convertRgbToXyz65(color)),\n\t\txyz65: convertXyz65ToP3\n\t},\n\n\ttoMode: {\n\t\trgb: color => convertXyz65ToRgb(convertP3ToXyz65(color)),\n\t\txyz65: convertP3ToXyz65\n\t}\n};\n\nexport default definition;\n", "/*\n\tConvert CIE XYZ D50 values to ProPhoto RGB\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n*/\n\nconst gamma = v => {\n\tlet abs = Math.abs(v);\n\tif (abs >= 1 / 512) {\n\t\treturn Math.sign(v) * Math.pow(abs, 1 / 1.8);\n\t}\n\treturn 16 * v;\n};\n\nconst convertXyz50ToProphoto = ({ x, y, z, alpha }) => {\n\tlet res = {\n\t\tmode: 'prophoto',\n\t\tr: gamma(\n\t\t\tx * 1.3457868816471585 -\n\t\t\t\ty * 0.2555720873797946 -\n\t\t\t\t0.0511018649755453 * z\n\t\t),\n\t\tg: gamma(\n\t\t\tx * -0.5446307051249019 +\n\t\t\t\ty * 1.5082477428451466 +\n\t\t\t\t0.0205274474364214 * z\n\t\t),\n\t\tb: gamma(x * 0.0 + y * 0.0 + 1.2119675456389452 * z)\n\t};\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertXyz50ToProphoto;\n", "/*\n\tConvert ProPhoto RGB values to CIE XYZ D50\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n*/\n\nconst linearize = v => {\n\tlet abs = Math.abs(v);\n\tif (abs >= 16 / 512) {\n\t\treturn Math.sign(v) * Math.pow(abs, 1.8);\n\t}\n\treturn v / 16;\n};\n\nconst convertProphotoToXyz50 = prophoto => {\n\tlet r = linearize(prophoto.r);\n\tlet g = linearize(prophoto.g);\n\tlet b = linearize(prophoto.b);\n\tlet res = {\n\t\tmode: 'xyz50',\n\t\tx:\n\t\t\t0.7977666449006423 * r +\n\t\t\t0.1351812974005331 * g +\n\t\t\t0.0313477341283922 * b,\n\t\ty:\n\t\t\t0.2880748288194013 * r +\n\t\t\t0.7118352342418731 * g +\n\t\t\t0.0000899369387256 * b,\n\t\tz: 0 * r + 0 * g + 0.8251046025104602 * b\n\t};\n\tif (prophoto.alpha !== undefined) {\n\t\tres.alpha = prophoto.alpha;\n\t}\n\treturn res;\n};\n\nexport default convertProphotoToXyz50;\n", "import rgb from '../rgb/definition.js';\n\nimport convertXyz50ToProphoto from './convertXyz50ToProphoto.js';\nimport convertProphotoToXyz50 from './convertProphotoToXyz50.js';\n\nimport convertXyz50ToRgb from '../xyz50/convertXyz50ToRgb.js';\nimport convertRgbToXyz50 from '../xyz50/convertRgbToXyz50.js';\n\n/*\n\tProPhoto RGB Color space\n\n\tReferences:\n\t\t* https://en.wikipedia.org/wiki/ProPhoto_RGB_color_space\n */\n\nconst definition = {\n\t...rgb,\n\tmode: 'prophoto',\n\tparse: ['prophoto-rgb'],\n\tserialize: 'prophoto-rgb',\n\n\tfromMode: {\n\t\txyz50: convertXyz50ToProphoto,\n\t\trgb: color => convertXyz50ToProphoto(convertRgbToXyz50(color))\n\t},\n\n\ttoMode: {\n\t\txyz50: convertProphotoToXyz50,\n\t\trgb: color => convertXyz50ToRgb(convertProphotoToXyz50(color))\n\t}\n};\n\nexport default definition;\n", "/*\n\tConvert CIE XYZ D65 values to Rec. 2020\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\t\t* https://www.itu.int/rec/R-REC-BT.2020/en\n*/\n\nconst α = 1.09929682680944;\nconst β = 0.018053968510807;\nconst gamma = v => {\n\tconst abs = Math.abs(v);\n\tif (abs > β) {\n\t\treturn (Math.sign(v) || 1) * (α * Math.pow(abs, 0.45) - (α - 1));\n\t}\n\treturn 4.5 * v;\n};\n\nconst convertXyz65ToRec2020 = ({ x, y, z, alpha }) => {\n\tlet res = {\n\t\tmode: 'rec2020',\n\t\tr: gamma(\n\t\t\tx * 1.7166511879712683 -\n\t\t\t\ty * 0.3556707837763925 -\n\t\t\t\t0.2533662813736599 * z\n\t\t),\n\t\tg: gamma(\n\t\t\tx * -0.6666843518324893 +\n\t\t\t\ty * 1.6164812366349395 +\n\t\t\t\t0.0157685458139111 * z\n\t\t),\n\t\tb: gamma(\n\t\t\tx * 0.0176398574453108 -\n\t\t\t\ty * 0.0427706132578085 +\n\t\t\t\t0.9421031212354739 * z\n\t\t)\n\t};\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertXyz65ToRec2020;\n", "/*\n\tConvert Rec. 2020 values to CIE XYZ D65\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\t\t* https://www.itu.int/rec/R-REC-BT.2020/en\n*/\n\nconst α = 1.09929682680944;\nconst β = 0.018053968510807;\n\nconst linearize = v => {\n\tlet abs = Math.abs(v);\n\tif (abs < β * 4.5) {\n\t\treturn v / 4.5;\n\t}\n\treturn (Math.sign(v) || 1) * Math.pow((abs + α - 1) / α, 1 / 0.45);\n};\n\nconst convertRec2020ToXyz65 = rec2020 => {\n\tlet r = linearize(rec2020.r);\n\tlet g = linearize(rec2020.g);\n\tlet b = linearize(rec2020.b);\n\tlet res = {\n\t\tmode: 'xyz65',\n\t\tx:\n\t\t\t0.6369580483012911 * r +\n\t\t\t0.1446169035862083 * g +\n\t\t\t0.1688809751641721 * b,\n\t\ty:\n\t\t\t0.262700212011267 * r +\n\t\t\t0.6779980715188708 * g +\n\t\t\t0.059301716469862 * b,\n\t\tz: 0 * r + 0.0280726930490874 * g + 1.0609850577107909 * b\n\t};\n\tif (rec2020.alpha !== undefined) {\n\t\tres.alpha = rec2020.alpha;\n\t}\n\treturn res;\n};\n\nexport default convertRec2020ToXyz65;\n", "import rgb from '../rgb/definition.js';\n\nimport convertXyz65ToRec2020 from './convertXyz65ToRec2020.js';\nimport convertRec2020ToXyz65 from './convertRec2020ToXyz65.js';\n\nimport convertRgbToXyz65 from '../xyz65/convertRgbToXyz65.js';\nimport convertXyz65ToRgb from '../xyz65/convertXyz65ToRgb.js';\n\nconst definition = {\n\t...rgb,\n\tmode: 'rec2020',\n\n\tfromMode: {\n\t\txyz65: convertXyz65ToRec2020,\n\t\trgb: color => convertXyz65ToRec2020(convertRgbToXyz65(color))\n\t},\n\n\ttoMode: {\n\t\txyz65: convertRec2020ToXyz65,\n\t\trgb: color => convertXyz65ToRgb(convertRec2020ToXyz65(color))\n\t},\n\n\tparse: ['rec2020'],\n\tserialize: 'rec2020'\n};\n\nexport default definition;\n", "export const bias = 0.00379307325527544933;\nexport const bias_cbrt = Math.cbrt(bias);\n", "import convertRgbToLrgb from '../lrgb/convertRgbToLrgb.js';\nimport { bias, bias_cbrt } from './constants.js';\n\nconst transfer = v => Math.cbrt(v) - bias_cbrt;\n\nconst convertRgbToXyb = color => {\n\tconst { r, g, b, alpha } = convertRgbToLrgb(color);\n\tconst l = transfer(0.3 * r + 0.622 * g + 0.078 * b + bias);\n\tconst m = transfer(0.23 * r + 0.692 * g + 0.078 * b + bias);\n\tconst s = transfer(\n\t\t0.24342268924547819 * r +\n\t\t\t0.20476744424496821 * g +\n\t\t\t0.5518098665095536 * b +\n\t\t\tbias\n\t);\n\tconst res = {\n\t\tmode: 'xyb',\n\t\tx: (l - m) / 2,\n\t\ty: (l + m) / 2,\n\t\t/* Apply default chroma from luma (subtract Y from B) */\n\t\tb: s - (l + m) / 2\n\t};\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertRgbToXyb;\n", "import convertLrgbToRgb from '../lrgb/convertLrgbToRgb.js';\nimport { bias, bias_cbrt } from './constants.js';\n\nconst transfer = v => Math.pow(v + bias_cbrt, 3);\n\nconst convertXybToRgb = ({ x, y, b, alpha }) => {\n\tconst l = transfer(x + y) - bias;\n\tconst m = transfer(y - x) - bias;\n\t/* Account for chroma from luma: add Y back to B */\n\tconst s = transfer(b + y) - bias;\n\n\tconst res = convertLrgbToRgb({\n\t\tr:\n\t\t\t11.031566904639861 * l -\n\t\t\t9.866943908131562 * m -\n\t\t\t0.16462299650829934 * s,\n\t\tg:\n\t\t\t-3.2541473810744237 * l +\n\t\t\t4.418770377582723 * m -\n\t\t\t0.16462299650829934 * s,\n\t\tb:\n\t\t\t-3.6588512867136815 * l +\n\t\t\t2.7129230459360922 * m +\n\t\t\t1.9459282407775895 * s\n\t});\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertXybToRgb;\n", "import { interpolatorLinear } from '../interpolate/linear.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\nimport convertRgbToXyb from './convertRgbToXyb.js';\nimport convertXybToRgb from './convertXybToRgb.js';\n\n/*\n\tThe XYB color space, used in JPEG XL.\n\tReference: https://ds.jpeg.org/whitepapers/jpeg-xl-whitepaper.pdf\n*/\n\nconst definition = {\n\tmode: 'xyb',\n\tchannels: ['x', 'y', 'b', 'alpha'],\n\tparse: ['--xyb'],\n\tserialize: '--xyb',\n\n\ttoMode: {\n\t\trgb: convertXybToRgb\n\t},\n\n\tfromMode: {\n\t\trgb: convertRgbToXyb\n\t},\n\n\tranges: {\n\t\tx: [-0.0154, 0.0281],\n\t\ty: [0, 0.8453],\n\t\tb: [-0.2778, 0.388]\n\t},\n\n\tinterpolate: {\n\t\tx: interpolatorLinear,\n\t\ty: interpolatorLinear,\n\t\tb: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t}\n};\n\nexport default definition;\n", "/*\n\tThe XYZ D50 color space\n\t-----------------------\n */\n\nimport convertXyz50ToRgb from './convertXyz50ToRgb.js';\nimport convertXyz50ToLab from '../lab/convertXyz50ToLab.js';\nimport convertRgbToXyz50 from './convertRgbToXyz50.js';\nimport convertLabToXyz50 from '../lab/convertLabToXyz50.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\n\nconst definition = {\n\tmode: 'xyz50',\n\tparse: ['xyz-d50'],\n\tserialize: 'xyz-d50',\n\n\ttoMode: {\n\t\trgb: convertXyz50ToRgb,\n\t\tlab: convertXyz50ToLab\n\t},\n\n\tfromMode: {\n\t\trgb: convertRgbToXyz50,\n\t\tlab: convertLabToXyz50\n\t},\n\n\tchannels: ['x', 'y', 'z', 'alpha'],\n\n\tranges: {\n\t\tx: [0, 0.964],\n\t\ty: [0, 0.999],\n\t\tz: [0, 0.825]\n\t},\n\n\tinterpolate: {\n\t\tx: interpolatorLinear,\n\t\ty: interpolatorLinear,\n\t\tz: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t}\n};\n\nexport default definition;\n", "/*\n\tChromatic adaptation of CIE XYZ from D65 to D50 white point\n\tusing the Bradford method.\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html\t\n*/\n\nconst convertXyz65ToXyz50 = xyz65 => {\n\tlet { x, y, z, alpha } = xyz65;\n\tlet res = {\n\t\tmode: 'xyz50',\n\t\tx:\n\t\t\t1.0479298208405488 * x +\n\t\t\t0.0229467933410191 * y -\n\t\t\t0.0501922295431356 * z,\n\t\ty:\n\t\t\t0.0296278156881593 * x +\n\t\t\t0.990434484573249 * y -\n\t\t\t0.0170738250293851 * z,\n\t\tz:\n\t\t\t-0.0092430581525912 * x +\n\t\t\t0.0150551448965779 * y +\n\t\t\t0.7518742899580008 * z\n\t};\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertXyz65ToXyz50;\n", "/*\n\tChromatic adaptation of CIE XYZ from D50 to D65 white point\n\tusing the Bradford method.\n\n\tReferences:\n\t\t* https://drafts.csswg.org/css-color/#color-conversion-code\n\t\t* http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html\t\n*/\n\nconst convertXyz50ToXyz65 = xyz50 => {\n\tlet { x, y, z, alpha } = xyz50;\n\tlet res = {\n\t\tmode: 'xyz65',\n\t\tx:\n\t\t\t0.9554734527042182 * x -\n\t\t\t0.0230985368742614 * y +\n\t\t\t0.0632593086610217 * z,\n\t\ty:\n\t\t\t-0.0283697069632081 * x +\n\t\t\t1.0099954580058226 * y +\n\t\t\t0.021041398966943 * z,\n\t\tz:\n\t\t\t0.0123140016883199 * x -\n\t\t\t0.0205076964334779 * y +\n\t\t\t1.3303659366080753 * z\n\t};\n\tif (alpha !== undefined) {\n\t\tres.alpha = alpha;\n\t}\n\treturn res;\n};\n\nexport default convertXyz50ToXyz65;\n", "/*\n\tThe XYZ D65 color space\n\t-----------------------\n */\n\nimport convertXyz65ToRgb from './convertXyz65ToRgb.js';\nimport convertRgbToXyz65 from './convertRgbToXyz65.js';\n\nimport convertXyz65ToXyz50 from './convertXyz65ToXyz50.js';\nimport convertXyz50ToXyz65 from './convertXyz50ToXyz65.js';\n\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\n\nconst definition = {\n\tmode: 'xyz65',\n\n\ttoMode: {\n\t\trgb: convertXyz65ToRgb,\n\t\txyz50: convertXyz65ToXyz50\n\t},\n\n\tfromMode: {\n\t\trgb: convertRgbToXyz65,\n\t\txyz50: convertXyz50ToXyz65\n\t},\n\n\tranges: {\n\t\tx: [0, 0.95],\n\t\ty: [0, 1],\n\t\tz: [0, 1.088]\n\t},\n\n\tchannels: ['x', 'y', 'z', 'alpha'],\n\n\tparse: ['xyz', 'xyz-d65'],\n\tserialize: 'xyz-d65',\n\n\tinterpolate: {\n\t\tx: interpolatorLinear,\n\t\ty: interpolatorLinear,\n\t\tz: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t}\n};\n\nexport default definition;\n", "const convertRgbToYiq = ({ r, g, b, alpha }) => {\n\tconst res = {\n\t\tmode: 'yiq',\n\t\ty: 0.29889531 * r + 0.58662247 * g + 0.11448223 * b,\n\t\ti: 0.59597799 * r - 0.2741761 * g - 0.32180189 * b,\n\t\tq: 0.21147017 * r - 0.52261711 * g + 0.31114694 * b\n\t};\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertRgbToYiq;\n", "const convertYiqToRgb = ({ y, i, q, alpha }) => {\n\tconst res = {\n\t\tmode: 'rgb',\n\t\tr: y + 0.95608445 * i + 0.6208885 * q,\n\t\tg: y - 0.27137664 * i - 0.6486059 * q,\n\t\tb: y - 1.10561724 * i + 1.70250126 * q\n\t};\n\tif (alpha !== undefined) res.alpha = alpha;\n\treturn res;\n};\n\nexport default convertYiqToRgb;\n", "import convertRgbToYiq from './convertRgbToYiq.js';\nimport convertYiqToRgb from './convertYiqToRgb.js';\nimport { interpolatorLinear } from '../interpolate/linear.js';\nimport { fixupAlpha } from '../fixup/alpha.js';\n\n/*\n\tYIQ Color Space\n\n\tReferences\n\t----------\n\n\tWikipedia:\n\t\thttps://en.wikipedia.org/wiki/YIQ\n\n\t\"Measuring perceived color difference using YIQ NTSC\n\ttransmission color space in mobile applications\"\n\t\t\n\t\tby Yuriy Kotsarenko, Fernando Ramos in:\n\t\tProgramación Matemática y Software (2010) \n\n\tAvailable at:\n\t\t\n\t\thttp://www.progmat.uaem.mx:8080/artVol2Num2/Articulo3Vol2Num2.pdf\n */\n\nconst definition = {\n\tmode: 'yiq',\n\n\ttoMode: {\n\t\trgb: convertYiqToRgb\n\t},\n\n\tfromMode: {\n\t\trgb: convertRgbToYiq\n\t},\n\n\tchannels: ['y', 'i', 'q', 'alpha'],\n\n\tparse: ['--yiq'],\n\tserialize: '--yiq',\n\n\tranges: {\n\t\ti: [-0.595, 0.595],\n\t\tq: [-0.522, 0.522]\n\t},\n\n\tinterpolate: {\n\t\ty: interpolatorLinear,\n\t\ti: interpolatorLinear,\n\t\tq: interpolatorLinear,\n\t\talpha: { use: interpolatorLinear, fixup: fixupAlpha }\n\t}\n};\n\nexport default definition;\n", "// From: https://github.com/d3/d3-format/issues/32\n\nconst r = (value, precision) =>\n\tMath.round(value * (precision = Math.pow(10, precision))) / precision;\n\nconst round =\n\t(precision = 4) =>\n\tvalue =>\n\t\ttypeof value === 'number' ? r(value, precision) : value;\n\nexport default round;\n", "import converter from './converter.js';\nimport round from './round.js';\nimport prepare from './_prepare.js';\nimport { getMode } from './modes.js';\n\nlet twoDecimals = round(2);\n\nconst clamp = value => Math.max(0, Math.min(1, value));\nconst fixup = value => Math.round(clamp(value) * 255);\n\nexport const serializeHex = color => {\n\tif (color === undefined) {\n\t\treturn undefined;\n\t}\n\n\tlet r = fixup(color.r);\n\tlet g = fixup(color.g);\n\tlet b = fixup(color.b);\n\n\treturn '#' + ((1 << 24) | (r << 16) | (g << 8) | b).toString(16).slice(1);\n};\n\nexport const serializeHex8 = color => {\n\tif (color === undefined) {\n\t\treturn undefined;\n\t}\n\n\tlet a = fixup(color.alpha !== undefined ? color.alpha : 1);\n\treturn serializeHex(color) + ((1 << 8) | a).toString(16).slice(1);\n};\n\nexport const serializeRgb = color => {\n\tif (color === undefined) {\n\t\treturn undefined;\n\t}\n\n\tlet r = color.r !== undefined ? fixup(color.r) : 'none';\n\tlet g = color.g !== undefined ? fixup(color.g) : 'none';\n\tlet b = color.b !== undefined ? fixup(color.b) : 'none';\n\n\tif (color.alpha === undefined || color.alpha === 1) {\n\t\t// opaque color\n\t\treturn `rgb(${r}, ${g}, ${b})`;\n\t} else {\n\t\t// transparent color\n\t\treturn `rgba(${r}, ${g}, ${b}, ${twoDecimals(clamp(color.alpha))})`;\n\t}\n};\n\nexport const serializeHsl = color => {\n\tif (color === undefined) {\n\t\treturn undefined;\n\t}\n\n\tconst h = twoDecimals(color.h || 0);\n\tconst s =\n\t\tcolor.s !== undefined\n\t\t\t? twoDecimals(clamp(color.s) * 100) + '%'\n\t\t\t: 'none';\n\tconst l =\n\t\tcolor.l !== undefined\n\t\t\t? twoDecimals(clamp(color.l) * 100) + '%'\n\t\t\t: 'none';\n\n\tif (color.alpha === undefined || color.alpha === 1) {\n\t\t// opaque color\n\t\treturn `hsl(${h}, ${s}, ${l})`;\n\t} else {\n\t\t// transparent color\n\t\treturn `hsla(${h}, ${s}, ${l}, ${twoDecimals(clamp(color.alpha))})`;\n\t}\n};\n\nexport const formatCss = c => {\n\tconst color = prepare(c);\n\tif (!color) {\n\t\treturn undefined;\n\t}\n\tconst def = getMode(color.mode);\n\tif (!def.serialize || typeof def.serialize === 'string') {\n\t\tlet res = `color(${def.serialize || `--${color.mode}`} `;\n\t\tdef.channels.forEach((ch, i) => {\n\t\t\tif (ch !== 'alpha') {\n\t\t\t\tres +=\n\t\t\t\t\t(i ? ' ' : '') +\n\t\t\t\t\t(color[ch] !== undefined ? color[ch] : 'none');\n\t\t\t}\n\t\t});\n\t\tif (color.alpha !== undefined && color.alpha < 1) {\n\t\t\tres += ` / ${color.alpha}`;\n\t\t}\n\t\treturn res + ')';\n\t}\n\tif (typeof def.serialize === 'function') {\n\t\treturn def.serialize(color);\n\t}\n\treturn undefined;\n};\n\nexport const formatHex = c => serializeHex(converter('rgb')(c));\nexport const formatHex8 = c => serializeHex8(converter('rgb')(c));\nexport const formatRgb = c => serializeRgb(converter('rgb')(c));\nexport const formatHsl = c => serializeHsl(converter('hsl')(c));\n", "/*\n\tColor blend modes, as defined in the \n\tCSS Compositing Level 4 spec\n\n\thttps://drafts.fxtf.org/compositing-2/\n\thttps://en.wikipedia.org/wiki/Blend_modes\n\thttps://en.wikipedia.org/wiki/Alpha_compositing\n\thttps://keithp.com/~keithp/porterduff/p253-porter.pdf\n */\n\nimport converter from './converter.js';\nimport { getMode } from './modes.js';\n\nconst BLENDS = {\n\tnormal: (b, s) => s,\n\tmultiply: (b, s) => b * s,\n\tscreen: (b, s) => b + s - b * s,\n\t'hard-light': (b, s) => (s < 0.5 ? b * 2 * s : 2 * s * (1 - b) - 1),\n\toverlay: (b, s) => (b < 0.5 ? s * 2 * b : 2 * b * (1 - s) - 1),\n\tdarken: (b, s) => Math.min(b, s),\n\tlighten: (b, s) => Math.max(b, s),\n\t'color-dodge': (b, s) =>\n\t\tb === 0 ? 0 : s === 1 ? 1 : Math.min(1, b / (1 - s)),\n\t'color-burn': (b, s) =>\n\t\tb === 1 ? 1 : s === 0 ? 0 : 1 - Math.min(1, (1 - b) / s),\n\t'soft-light': (b, s) =>\n\t\ts < 0.5\n\t\t\t? b - (1 - 2 * s) * b * (1 - b)\n\t\t\t: b +\n\t\t\t  (2 * s - 1) *\n\t\t\t\t\t((b < 0.25 ? ((16 * b - 12) * b + 4) * b : Math.sqrt(b)) -\n\t\t\t\t\t\tb),\n\tdifference: (b, s) => Math.abs(b - s),\n\texclusion: (b, s) => b + s - 2 * b * s\n};\n\nconst blend = (colors, type = 'normal', mode = 'rgb') => {\n\tlet fn = typeof type === 'function' ? type : BLENDS[type];\n\n\tlet conv = converter(mode);\n\n\t// get mode channels\n\tlet channels = getMode(mode).channels;\n\n\t// convert all colors to the mode\n\t// and assume undefined alphas are 1\n\tlet converted = colors.map(c => {\n\t\tlet cc = conv(c);\n\t\tif (cc.alpha === undefined) {\n\t\t\tcc.alpha = 1;\n\t\t}\n\t\treturn cc;\n\t});\n\n\treturn converted.reduce((b, s) => {\n\t\tif (b === undefined) return s;\n\t\t// blend backdrop and source\n\t\tlet alpha = s.alpha + b.alpha * (1 - s.alpha);\n\t\treturn channels.reduce(\n\t\t\t(res, ch) => {\n\t\t\t\tif (ch !== 'alpha') {\n\t\t\t\t\tif (alpha === 0) {\n\t\t\t\t\t\tres[ch] = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres[ch] =\n\t\t\t\t\t\t\ts.alpha * (1 - b.alpha) * s[ch] +\n\t\t\t\t\t\t\ts.alpha * b.alpha * fn(b[ch], s[ch]) +\n\t\t\t\t\t\t\t(1 - s.alpha) * b.alpha * b[ch];\n\t\t\t\t\t\t// TODO fix() assumes [0, 1] colors\n\t\t\t\t\t\t// and is only true for RGB / LRGB\n\t\t\t\t\t\tres[ch] = Math.max(0, Math.min(1, res[ch] / alpha));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t},\n\t\t\t{ mode, alpha }\n\t\t);\n\t});\n};\n\nexport default blend;\n", "import { getMode } from './modes.js';\n\n/*\n\tGenerate a random number between `min` and `max`\n */\nconst rand = ([min, max]) => min + Math.random() * (max - min);\n\n/*\n\tConvert a constraints object to intervals.\n */\nconst to_intervals = constraints =>\n\tObject.keys(constraints).reduce((o, k) => {\n\t\tlet v = constraints[k];\n\t\to[k] = Array.isArray(v) ? v : [v, v];\n\t\treturn o;\n\t}, {});\n\n/*\n\tGenerate a random color.\n */\nconst random = (mode = 'rgb', constraints = {}) => {\n\tlet def = getMode(mode);\n\tlet limits = to_intervals(constraints);\n\treturn def.channels.reduce(\n\t\t(res, ch) => {\n\t\t\t// ignore alpha if not present in constraints\n\t\t\tif (limits.alpha || ch !== 'alpha') {\n\t\t\t\tres[ch] = rand(limits[ch] || def.ranges[ch]);\n\t\t\t}\n\t\t\treturn res;\n\t\t},\n\t\t{ mode }\n\t);\n};\n\nexport default random;\n", "import converter from './converter.js';\nimport prepare from './_prepare.js';\nimport { getMode } from './modes.js';\n\nconst mapper = (fn, mode = 'rgb', preserve_mode = false) => {\n\tlet channels = mode ? getMode(mode).channels : null;\n\tlet conv = mode ? converter(mode) : prepare;\n\treturn color => {\n\t\tlet conv_color = conv(color);\n\t\tif (!conv_color) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet res = (channels || getMode(conv_color.mode).channels).reduce(\n\t\t\t(res, ch) => {\n\t\t\t\tlet v = fn(conv_color[ch], ch, conv_color, mode);\n\t\t\t\tif (v !== undefined && !isNaN(v)) {\n\t\t\t\t\tres[ch] = v;\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t},\n\t\t\t{ mode: conv_color.mode }\n\t\t);\n\t\tif (!preserve_mode) {\n\t\t\treturn res;\n\t\t}\n\t\tlet prep = prepare(color);\n\t\tif (prep && prep.mode !== res.mode) {\n\t\t\treturn converter(prep.mode)(res);\n\t\t}\n\t\treturn res;\n\t};\n};\n\nconst mapAlphaMultiply = (v, ch, c) => {\n\tif (ch !== 'alpha') {\n\t\treturn (v || 0) * (c.alpha !== undefined ? c.alpha : 1);\n\t}\n\treturn v;\n};\n\nconst mapAlphaDivide = (v, ch, c) => {\n\tif (ch !== 'alpha' && c.alpha !== 0) {\n\t\treturn (v || 0) / (c.alpha !== undefined ? c.alpha : 1);\n\t}\n\treturn v;\n};\n\nconst mapTransferLinear =\n\t(slope = 1, intercept = 0) =>\n\t(v, ch) => {\n\t\tif (ch !== 'alpha') {\n\t\t\treturn v * slope + intercept;\n\t\t}\n\t\treturn v;\n\t};\n\nconst mapTransferGamma =\n\t(amplitude = 1, exponent = 1, offset = 0) =>\n\t(v, ch) => {\n\t\tif (ch !== 'alpha') {\n\t\t\treturn amplitude * Math.pow(v, exponent) + offset;\n\t\t}\n\t\treturn v;\n\t};\n\nexport {\n\tmapper,\n\tmapAlphaMultiply,\n\tmapAlphaDivide,\n\tmapTransferLinear,\n\tmapTransferGamma\n};\n", "/*\n\tNormalize an array of color stop positions for a gradient\n\tbased on the rules defined in the CSS Images Module 4 spec:\n\n\t1. make the first position 0 and the last position 1 if missing\n\t2. sequences of unpositioned color stops should be spread out evenly\n\t3. no position can be smaller than any of the ones preceding it\n\t\n\tReference: https://drafts.csswg.org/css-images-4/#color-stop-fixup\n\n\tNote: this method does not make a defensive copy of the array\n\tit receives as argument. Instead, it adjusts the values in-place.\n */\nconst normalizePositions = arr => {\n\t// 1. fix up first/last position if missing\n\tif (arr[0] === undefined) {\n\t\tarr[0] = 0;\n\t}\n\tif (arr[arr.length - 1] === undefined) {\n\t\tarr[arr.length - 1] = 1;\n\t}\n\n\tlet i = 1;\n\tlet j;\n\tlet from_idx;\n\tlet from_pos;\n\tlet inc;\n\twhile (i < arr.length) {\n\t\t// 2. fill up undefined positions\n\t\tif (arr[i] === undefined) {\n\t\t\tfrom_idx = i;\n\t\t\tfrom_pos = arr[i - 1];\n\t\t\tj = i;\n\n\t\t\t// find end of `undefined` sequence...\n\t\t\twhile (arr[j] === undefined) j++;\n\n\t\t\t// ...and add evenly-spread positions\n\t\t\tinc = (arr[j] - from_pos) / (j - i + 1);\n\t\t\twhile (i < j) {\n\t\t\t\tarr[i] = from_pos + (i + 1 - from_idx) * inc;\n\t\t\t\ti++;\n\t\t\t}\n\t\t} else if (arr[i] < arr[i - 1]) {\n\t\t\t// 3. make positions increase\n\t\t\tarr[i] = arr[i - 1];\n\t\t}\n\t\ti++;\n\t}\n\treturn arr;\n};\n\nexport default normalizePositions;\n", "// Color interpolation hint exponential function\nconst midpoint = (H = 0.5) => t =>\n\tH <= 0 ? 1 : H >= 1 ? 0 : Math.pow(t, Math.log(0.5) / Math.log(H));\n\nexport default midpoint;\n", "import converter from '../converter.js';\nimport { getMode } from '../modes.js';\nimport normalizePositions from '../util/normalizePositions.js';\nimport easingMidpoint from '../easing/midpoint.js';\nimport { mapper, mapAlphaMultiply, mapAlphaDivide } from '../map.js';\n\nconst isfn = o => typeof o === 'function';\nconst isobj = o => o && typeof o === 'object';\nconst isnum = o => typeof o === 'number';\n\nconst interpolate_fn = (colors, mode = 'rgb', overrides, premap) => {\n\tlet def = getMode(mode);\n\tlet conv = converter(mode);\n\n\tlet conv_colors = [];\n\tlet positions = [];\n\tlet fns = {};\n\n\tcolors.forEach(val => {\n\t\tif (Array.isArray(val)) {\n\t\t\tconv_colors.push(conv(val[0]));\n\t\t\tpositions.push(val[1]);\n\t\t} else if (isnum(val) || isfn(val)) {\n\t\t\t// Color interpolation hint or easing function\n\t\t\tfns[positions.length] = val;\n\t\t} else {\n\t\t\tconv_colors.push(conv(val));\n\t\t\tpositions.push(undefined);\n\t\t}\n\t});\n\n\tnormalizePositions(positions);\n\n\t// override the default interpolators\n\t// from the color space definition with any custom ones\n\tlet fixed = def.channels.reduce((res, ch) => {\n\t\tlet ffn;\n\t\tif (isobj(overrides) && isobj(overrides[ch]) && overrides[ch].fixup) {\n\t\t\tffn = overrides[ch].fixup;\n\t\t} else if (isobj(def.interpolate[ch]) && def.interpolate[ch].fixup) {\n\t\t\tffn = def.interpolate[ch].fixup;\n\t\t} else {\n\t\t\tffn = v => v;\n\t\t}\n\t\tres[ch] = ffn(conv_colors.map(color => color[ch]));\n\t\treturn res;\n\t}, {});\n\n\tif (premap) {\n\t\tlet ccolors = conv_colors.map((color, idx) => {\n\t\t\treturn def.channels.reduce(\n\t\t\t\t(c, ch) => {\n\t\t\t\t\tc[ch] = fixed[ch][idx];\n\t\t\t\t\treturn c;\n\t\t\t\t},\n\t\t\t\t{ mode }\n\t\t\t);\n\t\t});\n\t\tfixed = def.channels.reduce((res, ch) => {\n\t\t\tres[ch] = ccolors.map(c => {\n\t\t\t\tlet v = premap(c[ch], ch, c, mode);\n\t\t\t\treturn isNaN(v) ? undefined : v;\n\t\t\t});\n\t\t\treturn res;\n\t\t}, {});\n\t}\n\n\tlet interpolators = def.channels.reduce((res, ch) => {\n\t\tlet ifn;\n\t\tif (isfn(overrides)) {\n\t\t\tifn = overrides;\n\t\t} else if (isobj(overrides) && isfn(overrides[ch])) {\n\t\t\tifn = overrides[ch];\n\t\t} else if (\n\t\t\tisobj(overrides) &&\n\t\t\tisobj(overrides[ch]) &&\n\t\t\toverrides[ch].use\n\t\t) {\n\t\t\tifn = overrides[ch].use;\n\t\t} else if (isfn(def.interpolate[ch])) {\n\t\t\tifn = def.interpolate[ch];\n\t\t} else if (isobj(def.interpolate[ch])) {\n\t\t\tifn = def.interpolate[ch].use;\n\t\t}\n\n\t\tres[ch] = ifn(fixed[ch]);\n\t\treturn res;\n\t}, {});\n\n\tlet n = conv_colors.length - 1;\n\n\treturn t => {\n\t\t// clamp t to the [0, 1] interval\n\t\tt = Math.min(Math.max(0, t), 1);\n\n\t\tif (t <= positions[0]) {\n\t\t\treturn conv_colors[0];\n\t\t}\n\n\t\tif (t > positions[n]) {\n\t\t\treturn conv_colors[n];\n\t\t}\n\n\t\t// Convert `t` from [0, 1] to `t0` between the appropriate two colors.\n\t\t// First, look for the two colors between which `t` is located.\n\t\t// Note: this can be optimized by searching for the index\n\t\t// through bisection instead of start-to-end.\n\t\tlet idx = 0;\n\t\twhile (positions[idx] < t) idx++;\n\t\tlet start = positions[idx - 1];\n\t\tlet delta = positions[idx] - start;\n\n\t\tlet P = (t - start) / delta;\n\n\t\t// use either the local easing, or the global easing, if any\n\t\tlet fn = fns[idx] || fns[0];\n\t\tif (fn !== undefined) {\n\t\t\tif (isnum(fn)) {\n\t\t\t\tfn = easingMidpoint((fn - start) / delta);\n\t\t\t}\n\t\t\tP = fn(P);\n\t\t}\n\n\t\tlet t0 = (idx - 1 + P) / n;\n\n\t\treturn def.channels.reduce(\n\t\t\t(res, channel) => {\n\t\t\t\tlet val = interpolators[channel](t0);\n\t\t\t\tif (val !== undefined) {\n\t\t\t\t\tres[channel] = val;\n\t\t\t\t}\n\t\t\t\treturn res;\n\t\t\t},\n\t\t\t{ mode }\n\t\t);\n\t};\n};\n\nconst interpolate = (colors, mode = 'rgb', overrides) =>\n\tinterpolate_fn(colors, mode, overrides);\n\nconst interpolateWith =\n\t(premap, postmap) =>\n\t(colors, mode = 'rgb', overrides) => {\n\t\tlet post = postmap ? mapper(postmap, mode) : undefined;\n\t\tlet it = interpolate_fn(colors, mode, overrides, premap);\n\t\treturn post ? t => post(it(t)) : it;\n\t};\n\nconst interpolateWithPremultipliedAlpha = interpolateWith(\n\tmapAlphaMultiply,\n\tmapAlphaDivide\n);\n\nexport { interpolate, interpolateWith, interpolateWithPremultipliedAlpha };\n", "/*\n\tBasis spline\n\t------------\n\n\tGiven control points V0...Vn (our values)\n\n\t\tS0 = V0\n\t\t...\n\t\tSi = 1/6 * Vi-1 + 2/3 * Vi + 1/6 * Vi+1\n\t\t...\n\t\tSn = Vn\n\n\tThe Bézier curve has control points:\n\n\t\tBi = Si-1, 2/3 * Vi-1 + 1/3 * Vi, 1/3 * Vi-1 + 2/3 * Vi, Si\n\n\tWhich we can then factor into the Bezier's explicit form:\n\t\n\t\tB(t) = (1-t)^3 * P0 + 3 * (1-t)^2 * t * P1 + (1-t) * t^2 * P2 + t^3 * P3 \n\n */\nconst mod = (v, l) => (v + l) % l;\n\nconst bspline = (Vim2, Vim1, Vi, Vip1, t) => {\n\tlet t2 = t * t;\n\tlet t3 = t2 * t;\n\treturn (\n\t\t((1 - 3 * t + 3 * t2 - t3) * Vim2 +\n\t\t\t(4 - 6 * t2 + 3 * t3) * Vim1 +\n\t\t\t(1 + 3 * t + 3 * t2 - 3 * t3) * Vi +\n\t\t\tt3 * Vip1) /\n\t\t6\n\t);\n};\n\nexport const interpolatorSplineBasis = arr => t => {\n\tlet classes = arr.length - 1;\n\tlet i = t >= 1 ? classes - 1 : Math.max(0, Math.floor(t * classes));\n\treturn bspline(\n\t\ti > 0 ? arr[i - 1] : 2 * arr[i] - arr[i + 1],\n\t\tarr[i],\n\t\tarr[i + 1],\n\t\ti < classes - 1 ? arr[i + 2] : 2 * arr[i + 1] - arr[i],\n\t\t(t - i / classes) * classes\n\t);\n};\n\nexport const interpolatorSplineBasisClosed = arr => t => {\n\tconst classes = arr.length - 1;\n\tconst i = Math.floor(t * classes);\n\treturn bspline(\n\t\tarr[mod(i - 1, arr.length)],\n\t\tarr[mod(i, arr.length)],\n\t\tarr[mod(i + 1, arr.length)],\n\t\tarr[mod(i + 2, arr.length)],\n\t\t(t - i / classes) * classes\n\t);\n};\n", "import {\n\tinterpolatorSplineBasisClosed,\n\tinterpolatorSplineBasis\n} from './splineBasis.js';\n\nconst solve = v => {\n\tlet i;\n\tlet n = v.length - 1;\n\tlet c = new Array(n);\n\tlet _v = new Array(n);\n\tlet sol = new Array(n);\n\n\tc[1] = 1 / 4;\n\t_v[1] = (6 * v[1] - v[0]) / 4;\n\n\tfor (i = 2; i < n; ++i) {\n\t\tc[i] = 1 / (4 - c[i - 1]);\n\t\t_v[i] = (6 * v[i] - (i == n - 1 ? v[n] : 0) - _v[i - 1]) * c[i];\n\t}\n\n\tsol[0] = v[0];\n\tsol[n] = v[n];\n\tif (n - 1 > 0) {\n\t\tsol[n - 1] = _v[n - 1];\n\t}\n\n\tfor (i = n - 2; i > 0; --i) {\n\t\tsol[i] = _v[i] - c[i] * sol[i + 1];\n\t}\n\n\treturn sol;\n};\n\nexport const interpolatorSplineNatural = arr =>\n\tinterpolatorSplineBasis(solve(arr));\nexport const interpolatorSplineNaturalClosed = arr =>\n\tinterpolatorSplineBasisClosed(solve(arr));\n", "import { interpolatorLinear } from './linear.js';\n\n/* \n\tMonotone spline\n\t---------------\n\n\tBased on:\n\n\t\tSteffen, M.\n\t\t\"A simple method for monotonic interpolation in one dimension.\"\n\t\tin Astronomy and Astrophysics, Vol. 239, p. 443-450 (Nov. 1990),\n      \tProvided by the SAO/NASA Astrophysics Data System.\n\n\t\thttps://ui.adsabs.harvard.edu/abs/1990A&A...239..443S\n\n\t(Reference thanks to `d3/d3-shape`)\n*/\n\nconst sgn = Math.sign;\nconst min = Math.min;\nconst abs = Math.abs;\n\nconst mono = arr => {\n\tlet n = arr.length - 1;\n\tlet s = [];\n\tlet p = [];\n\tlet yp = [];\n\tfor (let i = 0; i < n; i++) {\n\t\ts.push((arr[i + 1] - arr[i]) * n);\n\t\tp.push(i > 0 ? 0.5 * (arr[i + 1] - arr[i - 1]) * n : undefined);\n\t\typ.push(\n\t\t\ti > 0\n\t\t\t\t? (sgn(s[i - 1]) + sgn(s[i])) *\n\t\t\t\t\t\tmin(abs(s[i - 1]), abs(s[i]), 0.5 * abs(p[i]))\n\t\t\t\t: undefined\n\t\t);\n\t}\n\treturn [s, p, yp];\n};\n\nconst interpolator = (arr, yp, s) => {\n\tlet n = arr.length - 1;\n\tlet n2 = n * n;\n\treturn t => {\n\t\tlet i;\n\t\tif (t >= 1) {\n\t\t\ti = n - 1;\n\t\t} else {\n\t\t\ti = Math.max(0, Math.floor(t * n));\n\t\t}\n\t\tlet t1 = t - i / n;\n\t\tlet t2 = t1 * t1;\n\t\tlet t3 = t2 * t1;\n\t\treturn (\n\t\t\t(yp[i] + yp[i + 1] - 2 * s[i]) * n2 * t3 +\n\t\t\t(3 * s[i] - 2 * yp[i] - yp[i + 1]) * n * t2 +\n\t\t\typ[i] * t1 +\n\t\t\tarr[i]\n\t\t);\n\t};\n};\n\n/*\n\tA monotone spline which uses one-sided finite differences\n\tat the boundaries.\n */\nexport const interpolatorSplineMonotone = arr => {\n\tif (arr.length < 3) {\n\t\treturn interpolatorLinear(arr);\n\t}\n\tlet n = arr.length - 1;\n\tlet [s, , yp] = mono(arr);\n\typ[0] = s[0];\n\typ[n] = s[n - 1];\n\treturn interpolator(arr, yp, s);\n};\n\n/*\n\tThe clamped monotone spline derives the values of y' \n\tat the boundary points by tracing a parabola \n\tthrough the first/last three points.\n\n\tFor arrays of fewer than three values, we fall back to \n\tlinear interpolation.\n */\n\nexport const interpolatorSplineMonotone2 = arr => {\n\tif (arr.length < 3) {\n\t\treturn interpolatorLinear(arr);\n\t}\n\tlet n = arr.length - 1;\n\tlet [s, p, yp] = mono(arr);\n\tp[0] = (arr[1] * 2 - arr[0] * 1.5 - arr[2] * 0.5) * n;\n\tp[n] = (arr[n] * 1.5 - arr[n - 1] * 2 + arr[n - 2] * 0.5) * n;\n\typ[0] = p[0] * s[0] <= 0 ? 0 : abs(p[0]) > 2 * abs(s[0]) ? 2 * s[0] : p[0];\n\typ[n] =\n\t\tp[n] * s[n - 1] <= 0\n\t\t\t? 0\n\t\t\t: abs(p[n]) > 2 * abs(s[n - 1])\n\t\t\t? 2 * s[n - 1]\n\t\t\t: p[n];\n\treturn interpolator(arr, yp, s);\n};\n\n/*\n\tThe closed monotone spline considers \n\tthe array to be periodic:\n\n\tarr[-1] = arr[arr.length - 1]\n\tarr[arr.length] = arr[0]\n\n\t...and so on.\n */\nexport const interpolatorSplineMonotoneClosed = arr => {\n\tlet n = arr.length - 1;\n\tlet [s, p, yp] = mono(arr);\n\t// boundary conditions\n\tp[0] = 0.5 * (arr[1] - arr[n]) * n;\n\tp[n] = 0.5 * (arr[0] - arr[n - 1]) * n;\n\tlet s_m1 = (arr[0] - arr[n]) * n;\n\tlet s_n = s_m1;\n\typ[0] =\n\t\t(sgn(s_m1) + sgn(s[0])) * min(abs(s_m1), abs(s[0]), 0.5 * abs(p[0]));\n\typ[n] =\n\t\t(sgn(s[n - 1]) + sgn(s_n)) *\n\t\tmin(abs(s[n - 1]), abs(s_n), 0.5 * abs(p[n]));\n\treturn interpolator(arr, yp, s);\n};\n", "const gamma = (γ = 1) => (γ === 1 ? t => t : t => Math.pow(t, γ));\n\nexport default gamma;\n", "import gamma from './easing/gamma.js';\n\nconst samples = (n = 2, γ = 1) => {\n\tlet ease = gamma(γ);\n\tif (n < 2) {\n\t\treturn n < 1 ? [] : [ease(0.5)];\n\t}\n\tlet res = [];\n\tfor (let i = 0; i < n; i++) {\n\t\tres.push(ease(i / (n - 1)));\n\t}\n\treturn res;\n};\n\nexport default samples;\n", "import converter from './converter.js';\nimport prepare from './_prepare.js';\nimport { getMode } from './modes.js';\nimport { differenceEuclidean } from './difference.js';\n\nconst rgb = converter('rgb');\nconst fixup_rgb = c => {\n\tconst res = {\n\t\tmode: c.mode,\n\t\tr: Math.max(0, Math.min(c.r, 1)),\n\t\tg: Math.max(0, Math.min(c.g, 1)),\n\t\tb: Math.max(0, Math.min(c.b, 1))\n\t};\n\tif (c.alpha !== undefined) {\n\t\tres.alpha = c.alpha;\n\t}\n\treturn res;\n};\n\nconst inrange_rgb = c => {\n\treturn (\n\t\tc !== undefined &&\n\t\tc.r >= 0 &&\n\t\tc.r <= 1 &&\n\t\tc.g >= 0 &&\n\t\tc.g <= 1 &&\n\t\tc.b >= 0 &&\n\t\tc.b <= 1\n\t);\n};\n\n/*\n\tReturns whether the color is in the sRGB gamut.\n */\nexport function displayable(color) {\n\treturn inrange_rgb(rgb(color));\n}\n\n/*\n\tGiven a color space `mode`, returns a function\n\twith which to check whether a color is \n\tin that color space's gamut.\n */\nexport function inGamut(mode = 'rgb') {\n\tconst { gamut } = getMode(mode);\n\tif (!gamut) {\n\t\treturn color => true;\n\t}\n\tconst conv = converter(typeof gamut === 'string' ? gamut : mode);\n\treturn color => inrange_rgb(conv(color));\n}\n\n/*\n\tObtain a color that's in the sRGB gamut\n\tby converting it to sRGB and clipping the channel values\n\tso that they're within the [0, 1] range.\n\n\tThe result is returned in the color's original color space.\n */\nexport function clampRgb(color) {\n\tcolor = prepare(color);\n\n\t// if the color is undefined or displayable, return it directly\n\tif (color === undefined || displayable(color)) return color;\n\n\t// keep track of color's original mode\n\tlet conv = converter(color.mode);\n\n\treturn conv(fixup_rgb(rgb(color)));\n}\n\n/*\n\tGiven the `mode` color space, returns a function\n\twith which to obtain a color that's in gamut for\n\tthe `mode` color space by clipping the channel values\n\tso that they fit in their respective ranges.\n\n\tIt's similar to `clampRgb`, but works for any \n\tbounded color space (RGB or not) for which \n\tany combination of in-range channel values\n\tproduces an in-gamut color.\n */\nexport function clampGamut(mode = 'rgb') {\n\tconst { gamut } = getMode(mode);\n\tif (!gamut) {\n\t\treturn color => prepare(color);\n\t}\n\tconst destMode = typeof gamut === 'string' ? gamut : mode;\n\tconst destConv = converter(destMode);\n\tconst inDestGamut = inGamut(destMode);\n\treturn color => {\n\t\tconst original = prepare(color);\n\t\tif (!original) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst converted = destConv(original);\n\t\tif (inDestGamut(converted)) {\n\t\t\treturn original;\n\t\t}\n\t\tconst clamped = fixup_rgb(converted);\n\t\tif (original.mode === clamped.mode) {\n\t\t\treturn clamped;\n\t\t}\n\t\treturn converter(original.mode)(clamped);\n\t};\n}\n\n/*\n\tObtain a color that's in the sRGB gamut\n\tby first converting it to `mode` and then\n\tfinding the the greatest chroma value\n\tthat fits the gamut.\n\n\tBy default, the CIELCh color space is used,\n\tbut any color that has a chroma component will do.\n\n\tThe result is returned in the color's original color space.\n */\nexport function clampChroma(color, mode = 'lch') {\n\tcolor = prepare(color);\n\n\t// if the color is undefined or displayable, return it directly\n\tif (color === undefined || displayable(color)) return color;\n\n\t// keep track of color's original mode\n\tlet conv = converter(color.mode);\n\n\t// convert to the provided `mode` for clamping\n\tcolor = converter(mode)(color);\n\n\t// try with chroma = 0\n\tlet clamped = { ...color, c: 0 };\n\n\t// if not even chroma = 0 is displayable\n\t// fall back to RGB clamping\n\tif (!displayable(clamped)) {\n\t\treturn conv(fixup_rgb(rgb(clamped)));\n\t}\n\n\t// By this time we know chroma = 0 is displayable and our current chroma is not.\n\t// Find the displayable chroma through the bisection method.\n\tlet start = 0;\n\tlet end = color.c;\n\tlet range = getMode(mode).ranges.c;\n\tlet resolution = (range[1] - range[0]) / Math.pow(2, 13);\n\tlet _last_good_c;\n\n\twhile (end - start > resolution) {\n\t\tclamped.c = start + (end - start) * 0.5;\n\t\tif (displayable(clamped)) {\n\t\t\t_last_good_c = clamped.c;\n\t\t\tstart = clamped.c;\n\t\t} else {\n\t\t\tend = clamped.c;\n\t\t}\n\t}\n\n\treturn conv(\n\t\tdisplayable(clamped) ? clamped : { ...clamped, c: _last_good_c }\n\t);\n}\n\n/*\n\tObtain a color that's in the `dest` gamut,\n\tby first converting it to the `mode` color space\n\tand then finding the largest chroma that's in gamut,\n\tsimilar to `clampChroma`. \n\n\tThe color returned is in the `dest` color space.\n\n\tTo address the shortcomings of `clampChroma`, which can\n\tsometimes produce colors more desaturated than necessary,\n\tthe test used in the binary search is replaced with\n\t\"is color is roughly in gamut\", by comparing the candidate \n\tto the clipped version (obtained with `clampGamut`).\n\tThe test passes if the colors are not to dissimilar, \n\tjudged by the `delta` color difference function \n\tand an associated `jnd` just-noticeable difference value.\n\n\tThe default arguments for this function correspond to the\n\tgamut mapping algorithm defined in CSS Color Level 4:\n\thttps://drafts.csswg.org/css-color/#css-gamut-mapping\n */\nexport function toGamut(\n\tdest = 'rgb',\n\tmode = 'oklch',\n\tdelta = differenceEuclidean('oklch'),\n\tjnd = 0.02\n) {\n\tconst destConv = converter(dest);\n\n\tif (!getMode(dest).gamut) {\n\t\treturn color => destConv(color);\n\t}\n\n\tconst inDestinationGamut = inGamut(dest);\n\tconst clipToGamut = clampGamut(dest);\n\n\tconst ucs = converter(mode);\n\tconst { ranges } = getMode(mode);\n\n\tconst White = destConv('white');\n\tconst Black = destConv('black');\n\n\treturn color => {\n\t\tcolor = prepare(color);\n\t\tif (color === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst candidate = { ...ucs(color) };\n\t\tif (candidate.l >= ranges.l[1]) {\n\t\t\tconst res = { ...White };\n\t\t\tif (color.alpha !== undefined) {\n\t\t\t\tres.alpha = color.alpha;\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tif (candidate.l <= ranges.l[0]) {\n\t\t\tconst res = { ...Black };\n\t\t\tif (color.alpha !== undefined) {\n\t\t\t\tres.alpha = color.alpha;\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t\tif (inDestinationGamut(candidate)) {\n\t\t\treturn destConv(candidate);\n\t\t}\n\t\tlet start = 0;\n\t\tlet end = candidate.c;\n\t\tlet epsilon = (ranges.c[1] - ranges.c[0]) / 4000; // 0.0001 for oklch()\n\t\tlet clipped = clipToGamut(candidate);\n\t\twhile (end - start > epsilon) {\n\t\t\tcandidate.c = (start + end) * 0.5;\n\t\t\tclipped = clipToGamut(candidate);\n\t\t\tif (\n\t\t\t\tinDestinationGamut(candidate) ||\n\t\t\t\t(jnd > 0 && delta(candidate, clipped) <= jnd)\n\t\t\t) {\n\t\t\t\tstart = candidate.c;\n\t\t\t} else {\n\t\t\t\tend = candidate.c;\n\t\t\t}\n\t\t}\n\t\treturn destConv(inDestinationGamut(candidate) ? candidate : clipped);\n\t};\n}\n", "import { differenceEuclidean } from './difference.js';\n\n/*\n\tThis works linearly right now, but we might get better performance\n\twith a V-P Tree (Vantage Point Tree). \n\n\tReference:\n\t* http://pnylab.com/papers/vptree/main.html\n */\n\nconst nearest = (colors, metric = differenceEuclidean(), accessor = d => d) => {\n\tlet arr = colors.map((c, idx) => ({ color: accessor(c), i: idx }));\n\treturn (color, n = 1, τ = Infinity) => {\n\t\tif (isFinite(n)) {\n\t\t\tn = Math.max(1, Math.min(n, arr.length - 1));\n\t\t}\n\n\t\tarr.forEach(c => {\n\t\t\tc.d = metric(color, c.color);\n\t\t});\n\n\t\treturn arr\n\t\t\t.sort((a, b) => a.d - b.d)\n\t\t\t.slice(0, n)\n\t\t\t.filter(c => c.d < τ)\n\t\t\t.map(c => colors[c.i]);\n\t};\n};\n\nexport default nearest;\n", "import { mapper, mapTransferLinear } from './map.js';\nimport converter from './converter.js';\nimport prepare from './_prepare.js';\nimport { getMode } from './modes.js';\n\nconst minzero = v => Math.max(v, 0);\nconst clamp = v => Math.max(Math.min(v, 1), 0);\nconst lerp = (a, b, t) =>\n\ta === undefined || b === undefined ? undefined : a + t * (b - a);\n\nconst matrixSepia = amount => {\n\tlet a = 1 - clamp(amount);\n\treturn [\n\t\t0.393 + 0.607 * a,\n\t\t0.769 - 0.769 * a,\n\t\t0.189 - 0.189 * a,\n\t\t0,\n\t\t0.349 - 0.349 * a,\n\t\t0.686 + 0.314 * a,\n\t\t0.168 - 0.168 * a,\n\t\t0,\n\t\t0.272 - 0.272 * a,\n\t\t0.534 - 0.534 * a,\n\t\t0.131 + 0.869 * a,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t1\n\t];\n};\n\nconst matrixSaturate = sat => {\n\tlet s = minzero(sat);\n\treturn [\n\t\t0.213 + 0.787 * s,\n\t\t0.715 - 0.715 * s,\n\t\t0.072 - 0.072 * s,\n\t\t0,\n\t\t0.213 - 0.213 * s,\n\t\t0.715 + 0.285 * s,\n\t\t0.072 - 0.072 * s,\n\t\t0,\n\t\t0.213 - 0.213 * s,\n\t\t0.715 - 0.715 * s,\n\t\t0.072 + 0.928 * s,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t1\n\t];\n};\n\nconst matrixGrayscale = amount => {\n\tlet a = 1 - clamp(amount);\n\treturn [\n\t\t0.2126 + 0.7874 * a,\n\t\t0.7152 - 0.7152 * a,\n\t\t0.0722 - 0.0722 * a,\n\t\t0,\n\t\t0.2126 - 0.2126 * a,\n\t\t0.7152 + 0.2848 * a,\n\t\t0.0722 - 0.0722 * a,\n\t\t0,\n\t\t0.2126 - 0.2126 * a,\n\t\t0.7152 - 0.7152 * a,\n\t\t0.0722 + 0.9278 * a,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t1\n\t];\n};\n\nconst matrixHueRotate = degrees => {\n\tlet rad = (Math.PI * degrees) / 180;\n\tlet c = Math.cos(rad);\n\tlet s = Math.sin(rad);\n\treturn [\n\t\t0.213 + c * 0.787 - s * 0.213,\n\t\t0.715 - c * 0.715 - s * 0.715,\n\t\t0.072 - c * 0.072 + s * 0.928,\n\t\t0,\n\t\t0.213 - c * 0.213 + s * 0.143,\n\t\t0.715 + c * 0.285 + s * 0.14,\n\t\t0.072 - c * 0.072 - s * 0.283,\n\t\t0,\n\t\t0.213 - c * 0.213 - s * 0.787,\n\t\t0.715 - c * 0.715 + s * 0.715,\n\t\t0.072 + c * 0.928 + s * 0.072,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t0,\n\t\t1\n\t];\n};\n\nconst matrix = (values, mode, preserve_mode = false) => {\n\tlet conv = converter(mode);\n\tlet channels = getMode(mode).channels;\n\treturn color => {\n\t\tlet c = conv(color);\n\t\tif (!c) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet res = { mode };\n\t\tlet ch;\n\t\tlet count = channels.length;\n\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\tch = channels[Math.floor(i / count)];\n\t\t\tif (c[ch] === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tres[ch] =\n\t\t\t\t(res[ch] || 0) + values[i] * (c[channels[i % count]] || 0);\n\t\t}\n\t\tif (!preserve_mode) {\n\t\t\treturn res;\n\t\t}\n\t\tlet prep = prepare(color);\n\t\treturn prep && res.mode !== prep.mode ? converter(prep.mode)(res) : res;\n\t};\n};\n\nconst filterBrightness = (amt = 1, mode = 'rgb') => {\n\tlet a = minzero(amt);\n\treturn mapper(mapTransferLinear(a), mode, true);\n};\n\nconst filterContrast = (amt = 1, mode = 'rgb') => {\n\tlet a = minzero(amt);\n\treturn mapper(mapTransferLinear(a, (1 - a) / 2), mode, true);\n};\nconst filterSepia = (amt = 1, mode = 'rgb') =>\n\tmatrix(matrixSepia(amt), mode, true);\nconst filterSaturate = (amt = 1, mode = 'rgb') =>\n\tmatrix(matrixSaturate(amt), mode, true);\nconst filterGrayscale = (amt = 1, mode = 'rgb') =>\n\tmatrix(matrixGrayscale(amt), mode, true);\nconst filterInvert = (amt = 1, mode = 'rgb') => {\n\tlet a = clamp(amt);\n\treturn mapper(\n\t\t(v, ch) => (ch === 'alpha' ? v : lerp(a, 1 - a, v)),\n\t\tmode,\n\t\ttrue\n\t);\n};\nconst filterHueRotate = (deg = 0, mode = 'rgb') =>\n\tmatrix(matrixHueRotate(deg), mode, true);\n\nexport {\n\tfilterBrightness,\n\tfilterContrast,\n\tfilterSepia,\n\tfilterSaturate,\n\tfilterGrayscale,\n\tfilterInvert,\n\tfilterHueRotate\n};\n", "import converter from './converter.js';\nimport prepare from './_prepare.js';\nimport { lerp } from './interpolate/lerp.js';\n\nlet rgb = converter('rgb');\n\n/*\n\tColor vision deficiency (CVD) simulation based on:\n\n\t\tG. M. Machado, M. M. Oliveira and L. A. F. Fernandes, \n\t\t\"A Physiologically-based Model for Simulation of Color Vision Deficiency\" \n\t\tin IEEE Transactions on Visualization and Computer Graphics, \n\t\tvol. 15, no. 6, pp. 1291-1298, Nov.-Dec. 2009, \n\t\tdoi: 10.1109/TVCG.2009.113.\n\n\tFunctions use precomputed matrices from:\n\n\t\thttps://www.inf.ufrgs.br/~oliveira/pubs_files/CVD_Simulation/CVD_Simulation.html\n\n\tVia the `colorspace` R package documentation:\n\n\t\thttp://colorspace.r-forge.r-project.org/reference/simulate_cvd.html\n */\n\nconst PROT = [\n\t[1.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, -0.0, 1.0],\n\t[\n\t\t0.856167, 0.182038, -0.038205, 0.029342, 0.955115, 0.015544, -0.00288,\n\t\t-0.001563, 1.004443\n\t],\n\t[\n\t\t0.734766, 0.334872, -0.069637, 0.05184, 0.919198, 0.028963, -0.004928,\n\t\t-0.004209, 1.009137\n\t],\n\t[\n\t\t0.630323, 0.465641, -0.095964, 0.069181, 0.890046, 0.040773, -0.006308,\n\t\t-0.007724, 1.014032\n\t],\n\t[\n\t\t0.539009, 0.579343, -0.118352, 0.082546, 0.866121, 0.051332, -0.007136,\n\t\t-0.011959, 1.019095\n\t],\n\t[\n\t\t0.458064, 0.679578, -0.137642, 0.092785, 0.846313, 0.060902, -0.007494,\n\t\t-0.016807, 1.024301\n\t],\n\t[\n\t\t0.38545, 0.769005, -0.154455, 0.100526, 0.829802, 0.069673, -0.007442,\n\t\t-0.02219, 1.029632\n\t],\n\t[\n\t\t0.319627, 0.849633, -0.169261, 0.106241, 0.815969, 0.07779, -0.007025,\n\t\t-0.028051, 1.035076\n\t],\n\t[\n\t\t0.259411, 0.923008, -0.18242, 0.110296, 0.80434, 0.085364, -0.006276,\n\t\t-0.034346, 1.040622\n\t],\n\t[\n\t\t0.203876, 0.990338, -0.194214, 0.112975, 0.794542, 0.092483, -0.005222,\n\t\t-0.041043, 1.046265\n\t],\n\t[\n\t\t0.152286, 1.052583, -0.204868, 0.114503, 0.786281, 0.099216, -0.003882,\n\t\t-0.048116, 1.051998\n\t]\n];\n\nconst DEUTER = [\n\t[1.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, -0.0, 1.0],\n\t[\n\t\t0.866435, 0.177704, -0.044139, 0.049567, 0.939063, 0.01137, -0.003453,\n\t\t0.007233, 0.99622\n\t],\n\t[\n\t\t0.760729, 0.319078, -0.079807, 0.090568, 0.889315, 0.020117, -0.006027,\n\t\t0.013325, 0.992702\n\t],\n\t[\n\t\t0.675425, 0.43385, -0.109275, 0.125303, 0.847755, 0.026942, -0.00795,\n\t\t0.018572, 0.989378\n\t],\n\t[\n\t\t0.605511, 0.52856, -0.134071, 0.155318, 0.812366, 0.032316, -0.009376,\n\t\t0.023176, 0.9862\n\t],\n\t[\n\t\t0.547494, 0.607765, -0.155259, 0.181692, 0.781742, 0.036566, -0.01041,\n\t\t0.027275, 0.983136\n\t],\n\t[\n\t\t0.498864, 0.674741, -0.173604, 0.205199, 0.754872, 0.039929, -0.011131,\n\t\t0.030969, 0.980162\n\t],\n\t[\n\t\t0.457771, 0.731899, -0.18967, 0.226409, 0.731012, 0.042579, -0.011595,\n\t\t0.034333, 0.977261\n\t],\n\t[\n\t\t0.422823, 0.781057, -0.203881, 0.245752, 0.709602, 0.044646, -0.011843,\n\t\t0.037423, 0.974421\n\t],\n\t[\n\t\t0.392952, 0.82361, -0.216562, 0.263559, 0.69021, 0.046232, -0.01191,\n\t\t0.040281, 0.97163\n\t],\n\t[\n\t\t0.367322, 0.860646, -0.227968, 0.280085, 0.672501, 0.047413, -0.01182,\n\t\t0.04294, 0.968881\n\t]\n];\n\nconst TRIT = [\n\t[1.0, 0.0, -0.0, 0.0, 1.0, 0.0, -0.0, -0.0, 1.0],\n\t[\n\t\t0.92667, 0.092514, -0.019184, 0.021191, 0.964503, 0.014306, 0.008437,\n\t\t0.054813, 0.93675\n\t],\n\t[\n\t\t0.89572, 0.13333, -0.02905, 0.029997, 0.9454, 0.024603, 0.013027,\n\t\t0.104707, 0.882266\n\t],\n\t[\n\t\t0.905871, 0.127791, -0.033662, 0.026856, 0.941251, 0.031893, 0.01341,\n\t\t0.148296, 0.838294\n\t],\n\t[\n\t\t0.948035, 0.08949, -0.037526, 0.014364, 0.946792, 0.038844, 0.010853,\n\t\t0.193991, 0.795156\n\t],\n\t[\n\t\t1.017277, 0.027029, -0.044306, -0.006113, 0.958479, 0.047634, 0.006379,\n\t\t0.248708, 0.744913\n\t],\n\t[\n\t\t1.104996, -0.046633, -0.058363, -0.032137, 0.971635, 0.060503, 0.001336,\n\t\t0.317922, 0.680742\n\t],\n\t[\n\t\t1.193214, -0.109812, -0.083402, -0.058496, 0.97941, 0.079086, -0.002346,\n\t\t0.403492, 0.598854\n\t],\n\t[\n\t\t1.257728, -0.139648, -0.118081, -0.078003, 0.975409, 0.102594,\n\t\t-0.003316, 0.501214, 0.502102\n\t],\n\t[\n\t\t1.278864, -0.125333, -0.153531, -0.084748, 0.957674, 0.127074,\n\t\t-0.000989, 0.601151, 0.399838\n\t],\n\t[\n\t\t1.255528, -0.076749, -0.178779, -0.078411, 0.930809, 0.147602, 0.004733,\n\t\t0.691367, 0.3039\n\t]\n];\n\nconst deficiency = (lut, t) => {\n\tlet tt = Math.max(0, Math.min(1, t));\n\tlet i = Math.round(tt / 0.1);\n\tlet w = Math.round(tt % 0.1);\n\tlet arr = lut[i];\n\tif (w > 0 && i < lut.length - 1) {\n\t\tlet arr_2 = lut[i + 1];\n\t\tarr = arr.map((v, idx) => lerp(arr[idx], arr_2[idx], w));\n\t}\n\treturn color => {\n\t\tlet c = prepare(color);\n\t\tif (c === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet { r, g, b } = rgb(c);\n\t\tlet ret = {\n\t\t\tmode: 'rgb',\n\t\t\tr: arr[0] * r + arr[1] * g + arr[2] * b,\n\t\t\tg: arr[3] * r + arr[4] * g + arr[5] * b,\n\t\t\tb: arr[6] * r + arr[7] * g + arr[8] * b\n\t\t};\n\t\tif (c.alpha !== undefined) {\n\t\t\tret.alpha = c.alpha;\n\t\t}\n\t\treturn converter(c.mode)(ret);\n\t};\n};\n\nexport const filterDeficiencyProt = (severity = 1) =>\n\tdeficiency(PROT, severity);\nexport const filterDeficiencyDeuter = (severity = 1) =>\n\tdeficiency(DEUTER, severity);\nexport const filterDeficiencyTrit = (severity = 1) =>\n\tdeficiency(TRIT, severity);\n", "/*\n\tSmoothstep easing function. \n\tReference: https://en.wikipedia.org/wiki/Smoothstep\n */\nconst smoothstep = t => t * t * (3 - 2 * t);\n\nexport default smoothstep;\n", "/*\n\tSmootherstep easing function proposed by K. Perlin\n\tReference: https://en.wikipedia.org/wiki/Smoothstep\n */\nconst smootherstep = t => t * t * t * (t * (t * 6 - 15) + 10);\n\nexport default smootherstep;\n", "/* \n\tSinusoidal (cosine) in-out easing\n*/\nconst inOutSine = t => (1 - Math.cos(t * Math.PI)) / 2;\n\nexport default inOutSine;\n", "import converter from './converter.js';\n\n/*\n\tWCAG luminance\n\tReferences: \n\n\thttps://en.wikipedia.org/wiki/Relative_luminance\n\thttps://github.com/w3c/wcag/issues/236#issuecomment-379526596\n */\nexport function luminance(color) {\n\tlet c = converter('lrgb')(color);\n\treturn 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;\n}\n\n/*\n\tWCAG contrast\n */\nexport function contrast(a, b) {\n\tlet L1 = luminance(a);\n\tlet L2 = luminance(b);\n\treturn (Math.max(L1, L2) + 0.05) / (Math.min(L1, L2) + 0.05);\n}\n"],
  "mappings": "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",
  "names": ["definition", "k", "num", "c", "r", "c", "interpolator", "r", "c", "abs", "r", "rgb", "r", "fn", "c", "abs", "r", "definition", "definition_default", "hue", "hue", "fn", "r", "k", "c", "sum", "val", "c", "fn", "definition", "definition_default", "c", "c", "k", "e", "fn", "f2", "rgb", "c", "e", "f", "e", "f", "c", "definition", "definition_default", "definition", "c", "definition_default", "f", "r", "M", "definition", "definition_default", "r", "M", "definition", "c", "definition_default", "f", "r", "M", "definition", "definition_default", "definition", "c", "definition_default", "vn", "n", "p", "c1", "c2", "c3", "d0", "rgb", "definition", "definition_default", "c", "c", "definition", "c", "definition_default", "k", "e", "fn", "e", "k", "rgb", "r", "f", "e", "k", "f2", "rgb", "definition", "c", "definition_default", "definition", "definition_default", "c", "definition", "c", "definition_default", "definition", "definition_default", "c", "c", "c", "e", "k", "u_fn", "v_fn", "un", "vn", "k", "rgb", "definition", "definition_default", "definition", "definition_default", "definition", "rgb", "definition_default", "r", "M", "rgb", "M", "c", "k2", "k3", "f", "f2", "rgb", "r", "r2", "b", "b2", "k", "c", "definition_default", "c", "c", "k", "k", "definition_default", "c", "definition", "definition_default", "c", "c", "definition", "definition_default", "c", "rgb", "r", "definition", "definition_default", "gamma", "abs", "linearize", "abs", "r", "definition", "definition_default", "gamma", "abs", "α", "β", "linearize", "abs", "r", "definition", "definition_default", "r", "transfer", "definition", "definition_default", "definition", "definition_default", "definition", "definition_default", "r", "definition", "definition_default", "r", "c", "fn", "c", "min", "k", "fn", "res", "c", "isfn", "c", "n", "fn", "n", "c", "abs", "n", "p", "n2", "gamma", "n", "c", "c", "n", "clamp", "lerp", "c", "rgb", "c", "r", "c"]
}
